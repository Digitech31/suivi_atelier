
/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/listing.html
 */
frappe.templates['listing'] = '<div class="frappe-list">  <div class="list-filters" style="display: none;">  </div>   <div style="margin-bottom:9px" class="list-toolbar-wrapper hide">   <div class="list-toolbar btn-group" style="display:inline-block; margin-right: 10px;">   </div>  </div>     <div style="clear:both"></div>  <div class="no-result text-center" style="display: none;">   {%= no_result_message %}  </div>  <div class="result">   <div class="list-headers"></div>         <div class="list-loading text-center">          {%= frappe.messages.get_waiting_message(__("Loading") + "..." ) %}         </div>   <div class="result-list"></div>  </div>  <div class="list-paging-area">   <div class="row">    <div class="col-xs-6">     <div class="btn-group btn-group-paging">      <button type="button" class="btn btn-default btn-sm btn-info" data-value="20">20</button>      <button type="button" class="btn btn-default btn-sm" data-value="100">100</button>      <button type="button" class="btn btn-default btn-sm" data-value="500">500</button>     </div>    </div>    <div class="col-xs-6 text-right">     <button class="btn btn-default btn-more btn-sm">{%= _more %}...</button>    </div>   </div>  </div> </div> ';

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/model/indicator.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors

frappe.has_indicator = function(doctype) {
	// returns true if indicator is present
	if(frappe.model.is_submittable(doctype)) {
		return true;
	} else if((frappe.listview_settings[doctype] || {}).get_indicator
		|| frappe.workflow.get_state_fieldname(doctype)) {
		return true;
	} else if(frappe.meta.has_field(doctype, 'enabled')
		|| frappe.meta.has_field(doctype, 'disabled')) {
		return true;
	}
	return false;
}

frappe.get_indicator = function(doc, doctype) {
	if(doc.__unsaved) {
		return [__("Not Saved"), "orange"];
	}

	if(!doctype) doctype = doc.doctype;

	var workflow = frappe.workflow.workflows[doctype];
	var without_workflow = workflow ? workflow['override_status'] : true;

	var settings = frappe.listview_settings[doctype] || {};

	var is_submittable = frappe.model.is_submittable(doctype),
		workflow_fieldname = frappe.workflow.get_state_fieldname(doctype);

	// workflow
	if(workflow_fieldname && !without_workflow) {
		var value = doc[workflow_fieldname];
		if(value) {
			var colour = "";

			if(locals["Workflow State"][value] && locals["Workflow State"][value].style) {
				var colour = {
					"Success": "green",
					"Warning": "orange",
					"Danger": "red",
					"Primary": "blue",
				}[locals["Workflow State"][value].style];
			}
			if(!colour) colour = "darkgrey";

			return [__(value), colour, workflow_fieldname + ',=,' + value];
		}
	}

	// draft if document is submittable
	if(is_submittable && doc.docstatus==0 && !settings.has_indicator_for_draft) {
		return [__("Draft"), "red", "docstatus,=,0"];
	}

	// cancelled
	if(is_submittable && doc.docstatus==2) {
		return [__("Cancelled"), "red", "docstatus,=,2"];
	}

	if(settings.get_indicator) {
		var indicator = settings.get_indicator(doc);
		if(indicator) return indicator;
	}

	// if submittable
	if(is_submittable && doc.docstatus==1) {
		return [__("Submitted"), "blue", "docstatus,=,1"];
	}

	// based on status
	if(doc.status) {
		return [__(doc.status), frappe.utils.guess_colour(doc.status)];
	}

	// based on enabled
	if(frappe.meta.has_field(doctype, 'enabled')) {
		if(doc.enabled) {
			return [__('Enabled'), 'blue', 'enabled,=,1'];
		} else {
			return [__('Disabled'), 'grey', 'enabled,=,0'];
		}
	}

	// based on disabled
	if(frappe.meta.has_field(doctype, 'disabled')) {
		if(doc.disabled) {
			return [__('Disabled'), 'grey', 'disabled,=,1'];
		} else {
			return [__('Enabled'), 'blue', 'disabled,=,0'];
		}
	}
}

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/filters/filter.js
 */
frappe.ui.Filter = class {
	constructor(opts) {
		$.extend(this, opts);

		this.utils = frappe.ui.filter_utils;
		this.conditions = [
			["=", __("Equals")],
			["!=", __("Not Equals")],
			["like", __("Like")],
			["not like", __("Not Like")],
			["in", __("In")],
			["not in", __("Not In")],
			[">", ">"],
			["<", "<"],
			[">=", ">="],
			["<=", "<="],
			["Between", __("Between")]
		];
		this.invalid_condition_map = {
			Date: ['like', 'not like'],
			Datetime: ['like', 'not like'],
			Data: ['Between'],
			Select: ["Between", "<=", ">=", "<", ">"],
			Link: ["Between"],
			Currency: ["Between"],
			Color: ["Between"]
		};
		this.make();
		this.make_select();
		this.set_events();
		this.setup();
	}

	make() {
		this.filter_edit_area = $(frappe.render_template("edit_filter", {}))
			.appendTo(this.parent.find('.filter-edit-area'));
	}

	make_select() {
		this.fieldselect = new frappe.ui.FieldSelect({
			parent: this.filter_edit_area.find('.fieldname-select-area'),
			doctype: this.parent_doctype,
			filter_fields: this.filter_fields,
			select: (doctype, fieldname) => {
				this.set_field(doctype, fieldname);
			},
			filter_options: (doctype, fieldname) => {
				return this.filter_items(doctype, fieldname);
			}
		});

		if(this.fieldname) {
			this.fieldselect.set_value(this.doctype, this.fieldname);
		}
	}

	set_events() {
		this.filter_edit_area.find("a.remove-filter").on("click", () => {
			this.remove();
		});

		this.filter_edit_area.find(".set-filter-and-run").on("click", () => {
			this.filter_edit_area.removeClass("new-filter");
			this.on_change();
		});

		this.filter_edit_area.find('.condition').change(() => {
			if(!this.field) return;

			let condition = this.get_condition();
			let fieldtype = null;

			if(["in", "like", "not in", "not like"].includes(condition)) {
				fieldtype = 'Data';
				this.add_condition_help(condition);
			}
			this.set_field(this.field.df.parent, this.field.df.fieldname, fieldtype, condition);
		});
	}

	setup() {
		const fieldname = this.fieldname || 'name';
		// set the field
		return this.set_values(this.doctype, fieldname, this.condition, this.value);
	}

	setup_state(is_new) {
		let promise = Promise.resolve();
		if (is_new) {
			this.filter_edit_area.addClass("new-filter");
		} else {
			promise = this.update_filter_tag();
		}

		if(this.hidden) {
			promise.then(() => this.$filter_tag.hide());
		}
	}

	freeze() {
		this.update_filter_tag();
	}

	update_filter_tag() {
		return this._filter_value_set.then(() => {
			!this.$filter_tag ? this.make_tag() : this.set_filter_button_text();
			this.filter_edit_area.hide();
		});
	}

	remove() {
		this.filter_edit_area.remove();
		this.$filter_tag && this.$filter_tag.remove();
		this.field = null;
		this.on_change(true);
	}

	set_values(doctype, fieldname, condition, value) {
		// presents given (could be via tags!)
		this.set_field(doctype, fieldname);

		if(this.field.df.original_type==='Check') {
			value = (value==1) ? 'Yes' : 'No';
		}
		if(condition) this.set_condition(condition, true);

		// set value can be asynchronous, so update_filter_tag should happen after field is set
		this._filter_value_set = Promise.resolve();
		if(value) {
			this._filter_value_set = this.field.set_value(value);
		}
		return this._filter_value_set;
	}

	set_field(doctype, fieldname, fieldtype, condition) {
		// set in fieldname (again)
		let cur = {};
		if(this.field) for(let k in this.field.df) cur[k] = this.field.df[k];

		let original_docfield = (this.fieldselect.fields_by_name[doctype] || {})[fieldname];
		if(!original_docfield) {
			frappe.msgprint(__("Field {0} is not selectable.", [fieldname]));
			return;
		}

		let df = copy_dict(original_docfield);

		// filter field shouldn't be read only or hidden
		df.read_only = 0; df.hidden = 0;

		let c = condition ? condition : this.utils.get_default_condition(df);
		this.set_condition(c);

		this.utils.set_fieldtype(df, fieldtype, this.get_condition());

		// called when condition is changed,
		// don't change if all is well
		if(this.field && cur.fieldname == fieldname && df.fieldtype == cur.fieldtype &&
			df.parent == cur.parent) {
			return;
		}

		// clear field area and make field
		this.fieldselect.selected_doctype = doctype;
		this.fieldselect.selected_fieldname = fieldname;

		this.make_field(df, cur.fieldtype);
	}

	make_field(df, old_fieldtype) {
		let old_text = this.field ? this.field.get_value() : null;
		this.hide_invalid_conditions(df.fieldtype, df.original_type);

		let field_area = this.filter_edit_area.find('.filter-field').empty().get(0);
		let f = frappe.ui.form.make_control({
			df: df,
			parent: field_area,
			only_input: true,
		});
		f.refresh();

		this.field = f;
		if(old_text && f.fieldtype===old_fieldtype) {
			this.field.set_value(old_text);
		}

		// run on enter
		$(this.field.wrapper).find(':input').keydown(e => {
			if(e.which==13) {
				this.on_change();
			}
		});
	}

	get_value() {
		return [
			this.fieldselect.selected_doctype,
			this.field.df.fieldname,
			this.get_condition(),
			this.get_selected_value(),
			this.hidden
		];
	}

	get_selected_value() {
		return this.utils.get_selected_value(this.field, this.get_condition());
	}

	get_condition() {
		return this.filter_edit_area.find('.condition').val();
	}

	set_condition(condition, trigger_change=false) {
		let $condition_field = this.filter_edit_area.find('.condition');
		$condition_field.val(condition);
		if(trigger_change) $condition_field.change();
	}

	make_tag() {
		this.$filter_tag = this.get_filter_tag_element()
			.insertAfter(this.parent.find(".active-tag-filters .add-filter"));
		this.set_filter_button_text();
		this.bind_tag();
	}

	bind_tag() {
		this.$filter_tag.find(".remove-filter").on("click", this.remove.bind(this));

		let filter_button = this.$filter_tag.find(".toggle-filter");
		filter_button.on("click", () => {
			filter_button.closest('.tag-filters-area').find('.filter-edit-area').show();
			this.filter_edit_area.toggle();
		});
	}

	set_filter_button_text() {
		this.$filter_tag.find(".toggle-filter").html(this.get_filter_button_text());
	}

	get_filter_button_text() {
		let value = this.utils.get_formatted_value(this.field, this.get_selected_value());
		return `${__(this.field.df.label)} ${__(this.get_condition())} ${__(value)}`;
	}

	get_filter_tag_element() {
		return $(`<div class="filter-tag btn-group">
			<button class="btn btn-default btn-xs toggle-filter"
				title="${ __("Edit Filter") }">
			</button>
			<button class="btn btn-default btn-xs remove-filter"
				title="${ __("Remove Filter") }">
				<i class="fa fa-remove text-muted"></i>
			</button>
		</div>`);
	}

	add_condition_help(condition) {
		let $desc = this.field.desc_area;
		if(!$desc) {
			$desc = $('<div class="text-muted small">').appendTo(this.field.wrapper);
		}
		// set description
		$desc.html((in_list(["in", "not in"], condition)==="in"
			? __("values separated by commas")
			: __("use % as wildcard"))+'</div>');
	}

	hide_invalid_conditions(fieldtype, original_type) {
		let invalid_conditions = this.invalid_condition_map[fieldtype] ||
			this.invalid_condition_map[original_type] || [];

		for (let condition of this.conditions) {
			this.filter_edit_area.find(`.condition option[value="${condition[0]}"]`).toggle(
				!invalid_conditions.includes(condition[0])
			);
		}
	}
};

frappe.ui.filter_utils = {
	get_formatted_value(field, value) {
		if(field.df.fieldname==="docstatus") {
			value = {0:"Draft", 1:"Submitted", 2:"Cancelled"}[value] || value;
		} else if(field.df.original_type==="Check") {
			value = {0:"No", 1:"Yes"}[cint(value)];
		}
		return frappe.format(value, field.df, {only_value: 1});
	},

	get_selected_value(field, condition) {
		let val = field.get_value();

		if(typeof val==='string') {
			val = strip(val);
		}

		if(field.df.original_type == 'Check') {
			val = (val=='Yes' ? 1 :0);
		}

		if(condition.indexOf('like', 'not like')!==-1) {
			// automatically append wildcards
			if(val) {
				if(val.slice(0,1) !== "%") {
					val = "%" + val;
				}
				if(val.slice(-1) !== "%") {
					val = val + "%";
				}
			}
		} else if(in_list(["in", "not in"], condition)) {
			if(val) {
				val = $.map(val.split(","), function(v) { return strip(v); });
			}
		} if(val === '%') {
			val = "";
		}

		return val;
	},

	get_default_condition(df) {
		if (df.fieldtype == 'Data') {
			return 'like';
		} else if (df.fieldtype == 'Date' || df.fieldtype == 'Datetime'){
			return 'Between';
		} else {
			return '=';
		}
	},

	set_fieldtype(df, fieldtype, condition) {
		// reset
		if(df.original_type)
			df.fieldtype = df.original_type;
		else
			df.original_type = df.fieldtype;

		df.description = ''; df.reqd = 0;
		df.ignore_link_validation = true;

		// given
		if(fieldtype) {
			df.fieldtype = fieldtype;
			return;
		}

		// scrub
		if(df.fieldname=="docstatus") {
			df.fieldtype="Select",
			df.options=[
				{value:0, label:__("Draft")},
				{value:1, label:__("Submitted")},
				{value:2, label:__("Cancelled")}
			];
		} else if(df.fieldtype=='Check') {
			df.fieldtype='Select';
			df.options='No\nYes';
		} else if(['Text','Small Text','Text Editor','Code','Tag','Comments',
			'Dynamic Link','Read Only','Assign'].indexOf(df.fieldtype)!=-1) {
			df.fieldtype = 'Data';
		} else if(df.fieldtype=='Link' && ['=', '!='].indexOf(condition)==-1) {
			df.fieldtype = 'Data';
		}
		if(df.fieldtype==="Data" && (df.options || "").toLowerCase()==="email") {
			df.options = null;
		}
		if(condition == "Between" && (df.fieldtype == 'Date' || df.fieldtype == 'Datetime')){
			df.fieldtype = 'DateRange';
		}
	}
};

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/filters/filter_list.js
 */
frappe.ui.FilterGroup = class {
	constructor(opts) {
		$.extend(this, opts);
		this.wrapper = this.parent;
		this.filters = [];
		this.make();
	}

	make() {
		this.wrapper.append(this.get_container_template());
		this.set_events();
	}

	set_events() {
		this.wrapper.find('.add-filter').on('click', () => {
			this.add_filter(this.doctype, 'name');
		});
	}

	add_filters(filters) {
		let promises = [];

		for (const filter of filters) {
			promises.push(this.add_filter(...filter));
		}

		return Promise.all(promises);
	}

	add_filter(doctype, fieldname, condition, value, hidden) {
		if (!fieldname) return Promise.resolve();
		// adds a new filter, returns true if filter has been added

		// {}: Add in page filter by fieldname if exists ('=' => 'like')

		if(!this.validate_args(doctype, fieldname)) return false;

		const is_new_filter = arguments.length < 2;
		if (is_new_filter && this.wrapper.find(".new-filter:visible").length) {
			// only allow 1 new filter at a time!
			return Promise.resolve();
		} else {
			let args = [doctype, fieldname, condition, value, hidden];
			const promise = this.push_new_filter(args, is_new_filter);
			return (promise && promise.then) ? promise : Promise.resolve();
		}
	}

	validate_args(doctype, fieldname) {
		if(doctype && fieldname
			&& !frappe.meta.has_field(doctype, fieldname)
			&& !frappe.model.std_fields_list.includes(fieldname)) {

			frappe.throw(__(`Invalid filter: "${[fieldname.bold()]}"`));
			return false;
		}
		return true;
	}

	push_new_filter(args, is_new_filter=false) {
		// args: [doctype, fieldname, condition, value]
		if(this.filter_exists(args)) return;

		// {}: Clear page filter fieldname field

		let filter = this._push_new_filter(...args);

		if (filter && filter.value) {
			filter.setup_state(is_new_filter);
			return filter._filter_value_set; // internal promise
		}
	}

	_push_new_filter(doctype, fieldname, condition, value, hidden = false) {
		let args = {
			parent: this.wrapper,
			parent_doctype: this.doctype,
			doctype: doctype,
			fieldname: fieldname,
			condition: condition,
			value: value,
			hidden: hidden,
			on_change: (update) => {
				if(update) this.update_filters();
				this.on_change();
			},
			filter_items: (doctype, fieldname) => {
				return !this.filter_exists([doctype, fieldname]);
			}
		};
		let filter = new frappe.ui.Filter(args);
		this.filters.push(filter);
		return filter;
	}

	filter_exists(filter_value) {
		// filter_value of form: [doctype, fieldname, condition, value]
		let exists = false;
		this.filters.filter(f => f.field).map(f => {
			let f_value = f.get_value();
			if (filter_value.length === 2) {
				exists = filter_value[0] === f_value[0] && filter_value[1] === f_value[1];
				return;
			}

			let value = filter_value[3];
			let equal = frappe.utils.arrays_equal;

			if(equal(f_value.slice(0, 4), filter_value.slice(0, 4)) || (Array.isArray(value) && equal(value, f_value[3]))) {
				exists = true;
			}
		});
		return exists;
	}

	get_filters() {
		return this.filters.filter(f => f.field).map(f => {
			f.freeze();
			return f.get_value();
		});
		// {}: this.list.update_standard_filters(values);
	}

	update_filters() {
		this.filters = this.filters.filter(f => f.field); // remove hidden filters
	}

	clear_filters() {
		this.filters.map(f => { f.remove(true); });
		// {}: Clear page filters, .date-range-picker (called list run())
		this.filters = [];
	}

	get_filter(fieldname) {
		return this.filters.filter(f => {
			return (f.field && f.field.df.fieldname==fieldname);
		})[0];
	}

	get_container_template() {
		return $(`<div class="tag-filters-area">
			<div class="active-tag-filters">
				<button class="btn btn-default btn-xs add-filter text-muted">
						${__("Add Filter")}
				</button>
			</div>
		</div>
		<div class="filter-edit-area"></div>`);
	}
};

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/filters/field_select.js
 */
// <select> widget with all fields of a doctype as options
frappe.ui.FieldSelect = Class.extend({
	// opts parent, doctype, filter_fields, with_blank, select
	init(opts) {
		var me = this;
		$.extend(this, opts);
		this.fields_by_name = {};
		this.options = [];
		this.$input = $('<input class="form-control">')
			.appendTo(this.parent)
			.on("click", function () { $(this).select(); });
		this.select_input = this.$input.get(0);
		this.awesomplete = new Awesomplete(this.select_input, {
			minChars: 0,
			maxItems: 99,
			autoFirst: true,
			list: me.options,
			item(item) {
				return $(repl('<li class="filter-field-select"><p>%(label)s</p></li>', item))
					.data("item.autocomplete", item)
					.get(0);
			}
		});
		this.$input.on("awesomplete-select", function(e) {
			var o = e.originalEvent;
			var value = o.text.value;
			var item = me.awesomplete.get_item(value);
			me.selected_doctype = item.doctype;
			me.selected_fieldname = item.fieldname;
			if(me.select) me.select(item.doctype, item.fieldname);
		});
		this.$input.on("awesomplete-selectcomplete", function(e) {
			var o = e.originalEvent;
			var value = o.text.value;
			var item = me.awesomplete.get_item(value);
			me.$input.val(item.label);
		});

		if(this.filter_fields) {
			for(var i in this.filter_fields)
				this.add_field_option(this.filter_fields[i]);
		} else {
			this.build_options();
		}
		this.set_value(this.doctype, "name");
	},
	get_value() {
		return this.selected_doctype ? this.selected_doctype + "." + this.selected_fieldname : null;
	},
	val(value) {
		if(value===undefined) {
			return this.get_value();
		} else {
			this.set_value(value);
		}
	},
	clear() {
		this.selected_doctype = null;
		this.selected_fieldname = null;
		this.$input.val("");
	},
	set_value(doctype, fieldname) {
		var me = this;
		this.clear();
		if(!doctype) return;

		// old style
		if(doctype.indexOf(".")!==-1) {
			var parts = doctype.split(".");
			doctype = parts[0];
			fieldname = parts[1];
		}

		$.each(this.options, function(i, v) {
			if(v.doctype===doctype && v.fieldname===fieldname) {
				me.selected_doctype = doctype;
				me.selected_fieldname = fieldname;
				me.$input.val(v.label);
				return false;
			}
		});
	},
	build_options() {
		var me = this;
		me.table_fields = [];
		var std_filters = $.map(frappe.model.std_fields, function(d) {
			var opts = {parent: me.doctype};
			if(d.fieldname=="name") opts.options = me.doctype;
			return $.extend(copy_dict(d), opts);
		});

		// add parenttype column
		var doctype_obj = locals['DocType'][me.doctype];
		if(doctype_obj && cint(doctype_obj.istable)) {
			std_filters = std_filters.concat([{
				fieldname: 'parent',
				fieldtype: 'Data',
				label: 'Parent',
				parent: me.doctype,
			}]);
		}

		// blank
		if(this.with_blank) {
			this.options.push({
				label:"",
				value:"",
			});
		}

		// main table
		var main_table_fields = std_filters.concat(frappe.meta.docfield_list[me.doctype]);
		$.each(frappe.utils.sort(main_table_fields, "label", "string"), function(i, df) {
			// show fields where user has read access and if report hide flag is not set
			if(frappe.perm.has_perm(me.doctype, df.permlevel, "read") && !df.report_hide)
				me.add_field_option(df);
		});

		// child tables
		$.each(me.table_fields, function(i, table_df) {
			if(table_df.options) {
				var child_table_fields = [].concat(frappe.meta.docfield_list[table_df.options]);
				$.each(frappe.utils.sort(child_table_fields, "label", "string"), function(i, df) {
					// show fields where user has read access and if report hide flag is not set
					if(frappe.perm.has_perm(me.doctype, df.permlevel, "read") && !df.report_hide)
						me.add_field_option(df);
				});
			}
		});
	},

	add_field_option(df) {
		var me = this;
		var label, table;
		if(me.doctype && df.parent==me.doctype) {
			label = __(df.label);
			table = me.doctype;
			if(df.fieldtype=='Table') me.table_fields.push(df);
		} else {
			label = __(df.label) + ' (' + __(df.parent) + ')';
			table = df.parent;
		}

		// check if this option should be added
		if (this.filter_options && this.filter_options(table, df.fieldname) === false) {
			return;
		}

		if(frappe.model.no_value_type.indexOf(df.fieldtype) == -1 &&
			!(me.fields_by_name[df.parent] && me.fields_by_name[df.parent][df.fieldname])) {
			this.options.push({
				label: label,
				value: table + "." + df.fieldname,
				fieldname: df.fieldname,
				doctype: df.parent
			});
			if(!me.fields_by_name[df.parent]) me.fields_by_name[df.parent] = {};
			me.fields_by_name[df.parent][df.fieldname] = df;
		}
	},
});

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/filters/edit_filter.html
 */
frappe.templates['edit_filter'] = '<div class="filter-box">  <div class="list_filter row">   <div class="fieldname-select-area col-sm-4 form-group ui-front"></div>   <div class="col-sm-2 form-group">    <select class="condition form-control">     <option value="=">{%= __("Equals") %}</option>     <option value="like">{%= __("Like") %}</option>     <option value="in">{%= __("In") %}</option>     <option value="not in">{%= __("Not In") %}</option>     <option value="!=">{%= __("Not Equals") %}</option>     <option value="not like">{%= __("Not Like") %}</option>     <option value=">">{%= __(">") %}</option>     <option value="<">{%= __("<") %}</option>     <option value=">=">{%= __(">=") %}</option>     <option value="<=">{%= __("<=") %}</option>     <option value="Between">{%= __("Between") %}</option>    </select>   </div>   <div class="col-sm-6 col-xs-12">    <div class="filter-field pull-left" style="width: calc(100% - 70px)"></div>    <div class="filter-actions pull-left">     <a class="set-filter-and-run btn btn-sm btn-primary pull-left">      <i class=" fa fa-check visible-xs"></i>      <span class="hidden-xs">{%= __("Apply") %}</span></a>     <a class="small grey remove-filter pull-left">      <i class="octicon octicon-trashcan visible-xs"></i>      <span class="hidden-xs">{%= __("Remove") %}</span></a>    </div>    <div class="clearfix"></div>   </div>  </div> </div> ';

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/tags.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.ui.Tags = class {
	constructor({
		parent, placeholder, tagsList,
		onTagAdd,
		onTagRemove,
		onTagClick,
		onChange
	}) {
		this.tagsList = tagsList || [];
		this.onTagAdd = onTagAdd;
		this.onTagRemove = onTagRemove;
		this.onTagClick = onTagClick;
		this.onChange = onChange;

		this.setup(parent, placeholder);
	}

	setup(parent, placeholder) {
		this.$wrapper = $(`<div class="tags-wrapper"></div>`).appendTo(parent);
		this.$ul = $(`<ul class="tags-list"></ul>`).appendTo(this.$wrapper);
		this.$input = $(`<input class="tags-input"></input>`);

		this.$inputWrapper = this.getListElement(this.$input);
		this.$placeholder = this.getListElement($(`<span class="tags-placeholder text-muted">${placeholder}</span>`));
		this.$inputWrapper.appendTo(this.$ul);
		this.$placeholder.appendTo(this.$ul);

		this.deactivate();
		this.bind();
		this.boot();
	}

	bind() {
		this.$input.keypress((e) => {
			if(e.which == 13 || e.keyCode == 13) {
				this.addTag(this.$input.val());
				this.$input.val('');
			}
		});

		this.$input.on('blur', () => {
			this.deactivate();
		});

		this.$placeholder.on('click', () => {
			this.activate();
		});
	}

	boot() {
		this.addTags(this.tagsList);
	}

	activate() {
		this.$placeholder.hide();
		this.$inputWrapper.show();
		this.$input.focus();
	}

	deactivate() {
		this.$inputWrapper.hide();
		this.$placeholder.show();
	}

	refresh() {
		this.deactivate();
		this.activate();
	}

	addTag(label) {
		if(label && !this.tagsList.includes(label)) {
			let $tag = this.getTag(label);
			this.getListElement($tag).insertBefore(this.$inputWrapper);
			this.tagsList.push(label);
			this.onTagAdd && this.onTagAdd(label);

			this.refresh();
		}
	}

	removeTag(label) {
		if(this.tagsList.includes(label)) {
			let $tag = this.$ul.find(`.frappe-tag[data-tag-label="${label}"]`);
			
			// Just don't remove tag, but also the li DOM.
			$tag.parent('.tags-list-item').remove();

			this.tagsList = this.tagsList.filter(d => d !== label);
			this.onTagRemove && this.onTagRemove(label);
		}
	}

	addTags(labels) {
		labels.map(this.addTag.bind(this));
	}

	clearTags() {
		this.$ul.find('.frappe-tag').remove();
		this.tagsList = [];
	}

	getListElement($element, className) {
		let $li = $(`<li class="tags-list-item ${className}"></li>`);
		$element.appendTo($li);
		return $li;
	}

	getTag(label) {
		let $tag = $(`<div class="frappe-tag btn-group" data-tag-label=${label}>
		<button class="btn btn-default btn-xs toggle-tag"
			title="${ __("toggle Tag") }"
			data-tag-label=${label}>${label}
		</button>
		<button class="btn btn-default btn-xs remove-tag"
			title="${ __("Remove Tag") }"
			data-tag-label=${label}>
			<i class="fa fa-remove text-muted"></i>
		</button></div>`);

		let $removeTag = $tag.find(".remove-tag");

		$removeTag.on("click", () => {
			this.removeTag($removeTag.attr('data-tag-label'));
		});

		if(this.onTagClick) {
			let $toggle_tag = $tag.find(".toggle-tag");
			$toggle_tag.on("click", () => {
				this.onTagClick($toggle_tag.attr('data-tag-label'));
			});
		}

		return $tag;
	}
}

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/tag_editor.js
 */
frappe.ui.TagEditor = Class.extend({
	init: function(opts) {
		/* docs:
		Arguments

		- parent
		- user_tags
		- doctype
		- docname
		*/
		$.extend(this, opts);

		this.setup_tags();

		if (!this.user_tags) {
			this.user_tags = "";
		}
		this.initialized = true;
		this.refresh(this.user_tags);
	},
	setup_tags: function() {
		var me = this;

		// hidden form, does not have parent
		if (!this.parent) {
			return;
		}

		this.wrapper = $('<div class="tag-line" style="position: relative">').appendTo(this.parent);
		if(!this.wrapper.length) return;

		this.tags = new frappe.ui.Tags({
			parent: this.wrapper,
			placeholder: "Add a tag ...",
			onTagAdd: (tag) => {
				if(me.initialized && !me.refreshing) {
					tag = toTitle(tag);
					return frappe.call({
						method: 'frappe.desk.tags.add_tag',
						args: me.get_args(tag),
						callback: function(r) {
							var user_tags = me.user_tags ? me.user_tags.split(",") : [];
							user_tags.push(tag)
							me.user_tags = user_tags.join(",");
							me.on_change && me.on_change(me.user_tags);
						}
					});
				}
			},
			onTagRemove: (tag) => {
				if(!me.refreshing) {
					return frappe.call({
						method: 'frappe.desk.tags.remove_tag',
						args: me.get_args(tag),
						callback: function(r) {
							var user_tags = me.user_tags.split(",");
							user_tags.splice(user_tags.indexOf(tag), 1);
							me.user_tags = user_tags.join(",");
							me.on_change && me.on_change(me.user_tags);
						}
					});
				}
			}
		});
		this.setup_awesomplete();
		this.setup_complete = true;
	},
	setup_awesomplete: function() {
		var me = this;
		var $input = this.wrapper.find("input.tags-input");
		var input = $input.get(0);
		this.awesomplete = new Awesomplete(input, {
			minChars: 0,
			maxItems: 99,
			list: []
		});
		$input.on("awesomplete-open", function(e){
			$input.attr('state', 'open');
		});
		$input.on("awesomplete-close", function(e){
			$input.attr('state', 'closed');
		});
		$input.on("input", function(e) {
			var value = e.target.value;
			frappe.call({
				method:"frappe.desk.tags.get_tags",
				args:{
					doctype: me.frm.doctype,
					txt: value.toLowerCase(),
					cat_tags: me.list_sidebar ?
						JSON.stringify(me.list_sidebar.get_cat_tags()) : '[]'
				},
				callback: function(r) {
					me.awesomplete.list = r.message;
				}
			});
		});
		$input.on("focus", function(e) {
			if($input.attr('state') != 'open') {
				$input.trigger("input");
			}
		});
	},
	get_args: function(tag) {
		return {
			tag: tag,
			dt: this.frm.doctype,
			dn: this.frm.docname,
		}
	},
	refresh: function(user_tags) {
		var me = this;
		if (!this.initialized || !this.setup_complete || this.refreshing) return;

		me.refreshing = true;
		try {
			me.tags.clearTags();
			if(user_tags) {
				me.tags.addTags(user_tags.split(','));
			}
		} catch(e) {
			me.refreshing = false;
			// wtf bug
			setTimeout( function() { me.refresh(); }, 100);
		}
		me.refreshing = false;

	}
})

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/like.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.ui.is_liked = function(doc) {
	var liked = frappe.ui.get_liked_by(doc);
	return liked.indexOf(frappe.session.user)===-1 ? false : true;
}

frappe.ui.get_liked_by = function(doc) {
	var liked = doc._liked_by;
	if(liked) {
		liked = JSON.parse(liked);
	}

	return liked || [];
}

frappe.ui.toggle_like = function($btn, doctype, name, callback) {
	var add = $btn.hasClass("not-liked") ? "Yes" : "No";
	// disable click
	$btn.css('pointer-events', 'none');

	frappe.call({
		method: "frappe.desk.like.toggle_like",
		quiet: true,
		args: {
			doctype: doctype,
			name: name,
			add: add,
		},
		callback: function(r) {
			// renable click
			$btn.css('pointer-events', 'auto');

			if(!r.exc) {
				// update in all local-buttons
				var action_buttons = $('.like-action[data-name="'+ name.replace(/"/g, '\"')
					+'"][data-doctype="'+ doctype.replace(/"/g, '\"')+'"]');

				if(add==="Yes") {
					action_buttons.removeClass("not-liked text-extra-muted");
				} else {
					action_buttons.addClass("not-liked text-extra-muted");
				}

				// update in locals (form)
				var doc = locals[doctype] && locals[doctype][name];
				if(doc) {
					var liked_by = JSON.parse(doc._liked_by || "[]"),
						idx = liked_by.indexOf(frappe.session.user);
					if(add==="Yes") {
						if(idx===-1)
							liked_by.push(frappe.session.user);
					} else {
						if(idx!==-1) {
							liked_by = liked_by.slice(0,idx).concat(liked_by.slice(idx+1))
						}
					}
					doc._liked_by = JSON.stringify(liked_by);
				}

				if(callback) {
					callback();
				}
			}
		}
	});
};

frappe.ui.click_toggle_like = function() {
	var $btn = $(this);
	var $count = $btn.siblings(".likes-count");
	var not_liked = $btn.hasClass("not-liked");
	var doctype = $btn.attr("data-doctype");
	var name = $btn.attr("data-name");

	frappe.ui.toggle_like($btn, doctype, name, function() {
		if (not_liked) {
			$count.text(cint($count.text()) + 1);
		} else {
			$count.text(cint($count.text()) - 1);
		}
	});

	return false;
}

frappe.ui.setup_like_popover = function($parent, selector) {
	if (frappe.dom.is_touchscreen()) {
		return;
	}

	$parent.on("mouseover", selector, function() {
		var $wrapper = $(this);

		$wrapper.popover({
			animation: true,
			placement: "right",
			content: function() {
				var liked_by = $wrapper.attr('data-liked-by');
				liked_by = liked_by ? decodeURI(liked_by) : '[]';
				liked_by = JSON.parse(liked_by);

				var user = frappe.session.user;
				// hack
				if ($wrapper.find(".not-liked").length) {
					if (liked_by.indexOf(user)!==-1) {
						liked_by.splice(liked_by.indexOf(user), 1);
					}
				} else {
					if (liked_by.indexOf(user)===-1) {
						liked_by.push(user);
					}
				}

				if (!liked_by.length) {
					return "";
				}
				return frappe.render_template("liked_by", {"liked_by": liked_by});
			},
			html: true,
			container: 'body'
		});

		$wrapper.popover('show');
	});

	$parent.on("mouseout", selector, function() {
		$(this).popover('destroy');
	});
}

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/liked_by.html
 */
frappe.templates['liked_by'] = '<ul class="list-unstyled liked-by-popover">  {% for (var i in liked_by) { var liked_by_user = liked_by[i]; %}   <li>    {%= frappe.avatar(liked_by_user) %}    <span>{%= frappe.user.full_name(liked_by_user) %}</span>   </li>  {% } %} </ul> ';

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/html/print_template.html
 */
frappe.templates['print_template'] = '<!DOCTYPE html> <html lang="en">   <head>     <meta charset="utf-8">     <meta http-equiv="X-UA-Compatible" content="IE=edge">     <meta name="viewport" content="width=device-width, initial-scale=1">     <meta name="description" content="">     <meta name="author" content="">     <title>{{ title }}</title>     <link href="{{ base_url }}/assets/frappe/css/bootstrap.css" rel="stylesheet">  <link type="text/css" rel="stylesheet"         href="{{ base_url }}/assets/frappe/css/font-awesome.css">  <style>   {{ print_css }}  </style>   </head>   <body>    <div class="print-format-gutter">     {% if print_settings.repeat_header_footer %}    <div id="footer-html" class="visible-pdf">     {% if print_settings.letter_head && print_settings.letter_head.footer %}      <div class="letter-head-footer">       {{ print_settings.letter_head.footer }}      </div>     {% endif %}     <p class="text-center small page-number visible-pdf">      {{ __("Page {0} of {1}", [`<span class="page"></span>`, `<span class="topage"></span>`]) }}     </p>    </div>     {% endif %}      <div class="print-format {% if landscape %} landscape {% endif %}"     {% if columns.length > 20 %}      style="font-size: 4.0pt"     {% endif %}    >      {% if print_settings.letter_head %}      <div {% if print_settings.repeat_header_footer %} id="header-html" class="hidden-pdf" {% endif %}>       <div class="letter-head">{{ print_settings.letter_head.header }}</div>      </div>      {% endif %}          {{ content }}     </div>    </div>   </body> </html> ';

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/list/base_list.js
 */
frappe.provide('frappe.views');

frappe.views.BaseList = class BaseList {
	constructor(opts) {
		Object.assign(this, opts);
		this.show();
	}

	show() {
		this.init().then(() => this.refresh());
	}

	init() {

		if (this.init_promise) return this.init_promise;

		let tasks = [
			this.setup_defaults,
			this.set_stats,
			this.setup_fields,
			// make view
			this.setup_page,
			this.setup_page_head,
			this.setup_side_bar,
			this.setup_main_section,
			this.setup_view,
		].map(fn => fn.bind(this));

		this.init_promise = frappe.run_serially(tasks);
		return this.init_promise;
	}

	setup_defaults() {
		this.page_name = frappe.get_route_str();
		this.page_title = this.page_title || __(this.doctype);
		this.meta = frappe.get_meta(this.doctype);
		this.settings = frappe.listview_settings[this.doctype] || {};
		this.user_settings = frappe.get_user_settings(this.doctype);

		this.start = 0;
		this.page_length = 20;
		this.data = [];
		this.method = 'frappe.desk.reportview.get';

		this.can_create = frappe.model.can_create(this.doctype);
		this.can_delete = frappe.model.can_delete(this.doctype);
		this.can_write = frappe.model.can_write(this.doctype);

		this.fields = [];
		this.filters = [];
		this.order_by = 'modified desc';

		// Setup buttons
		this.primary_action = null;
		this.secondary_action = {
			label: __('Refresh'),
			action: () => this.refresh()
		};

		this.menu_items = [{
			label: __('Refresh'),
			action: () => this.refresh(),
			class: 'visible-xs'
		}];
	}

	setup_fields() {
		this.set_fields();
		this.build_fields();
	}

	set_fields() {
		let fields = [].concat(
			frappe.model.std_fields_list,
			this.get_fields_in_list_view(),
			[this.meta.title_field, this.meta.image_field],
			(this.settings.add_fields || [])
		);

		fields.forEach(f => this._add_field(f));
	}

	get_fields_in_list_view() {
		return this.meta.fields.filter(df => {
			return frappe.model.is_value_type(df.fieldtype) && (
				df.in_list_view
				&& frappe.perm.has_perm(this.doctype, df.permlevel, 'read')
			) || (
				df.fieldtype === 'Currency'
				&& df.options
				&& !df.options.includes(':')
			) || (
				df.fieldname === 'status'
			);
		});
	}

	build_fields() {
		// fill in missing doctype
		this.fields = this.fields.map(f => {
			if (typeof f === 'string') {
				f = [f, this.doctype];
			}
			return f;
		});
		//de-dup
		this.fields = this.fields.uniqBy(f => f[0] + f[1]);
	}

	_add_field(fieldname) {
		if (!fieldname) return;
		let doctype = this.doctype;

		if (typeof fieldname === 'object') {
			// df is passed
			const df = fieldname;
			fieldname = df.fieldname;
			doctype = df.parent;
		}

		const is_valid_field = frappe.model.std_fields_list.includes(fieldname)
			|| frappe.meta.has_field(doctype, fieldname);

		if (!is_valid_field) {
			return;
		}

		this.fields.push([fieldname, doctype]);
	}

	set_stats() {
		this.stats = ['_user_tags'];
		// add workflow field (as priority)
		this.workflow_state_fieldname = frappe.workflow.get_state_fieldname(this.doctype);
		if (this.workflow_state_fieldname) {
			if (!frappe.workflow.workflows[this.doctype]['override_status']) {
				this._add_field(this.workflow_state_fieldname);
			}
			this.stats.push(this.workflow_state_fieldname);
		}
	}

	setup_page() {
		this.parent.list_view = this;
		this.page = this.parent.page;
		this.$page = $(this.parent);
		this.page.page_form.removeClass('row').addClass('flex');
	}

	setup_page_head() {
		this.page.set_title(this.page_title);
		this.set_menu_items();
		this.set_breadcrumbs();
	}

	set_menu_items() {
		const $secondary_action = this.page.set_secondary_action(
			this.secondary_action.label,
			this.secondary_action.action,
			this.secondary_action.icon
		);
		if (!this.secondary_action.icon) {
			$secondary_action.addClass('hidden-xs');
		} else {
			$secondary_action.addClass('visible-xs');
		}

		this.menu_items.map(item => {
			const $item = this.page.add_menu_item(item.label, item.action, item.standard);
			if (item.class) {
				$item.addClass(item.class);
			}
		});
	}

	set_breadcrumbs() {
		frappe.breadcrumbs.add(this.meta.module, this.doctype);
	}

	setup_side_bar() {
		this.list_sidebar = new frappe.views.ListSidebar({
			doctype: this.doctype,
			stats: this.stats,
			parent: this.$page.find('.layout-side-section'),
			// set_filter: this.set_filter.bind(this),
			page: this.page,
			list_view: this
		});
	}

	toggle_side_bar() {
		this.list_sidebar.parent.toggleClass('hide');
		this.page.current_view.find('.layout-main-section-wrapper').toggleClass('col-md-10 col-md-12');
	}

	setup_main_section() {
		this.setup_list_wrapper();
		this.setup_filter_area();
		this.setup_sort_selector();
		this.setup_result_area();
		this.setup_no_result_area();
		this.setup_freeze_area();
		this.setup_paging_area();
		this.setup_footnote_area();
	}

	setup_list_wrapper() {
		this.$frappe_list = $('<div class="frappe-list">').appendTo(this.page.main);
	}

	setup_filter_area() {
		this.filter_area = new FilterArea(this);

		if (this.filters.length > 0) {
			return this.filter_area.set(this.filters);
		}
	}

	setup_sort_selector() {
		this.sort_selector = new frappe.ui.SortSelector({
			parent: this.filter_area.$filter_list_wrapper,
			doctype: this.doctype,
			args: this.order_by,
			onchange: () => this.refresh(true)
		});
	}

	setup_result_area() {
		this.$result = $(`<div class="result">`).hide();
		this.$frappe_list.append(this.$result);
	}

	setup_no_result_area() {
		this.$no_result = $(`
			<div class="no-result text-muted flex justify-center align-center">
				${this.get_no_result_message()}
			</div>
		`).hide();
		this.$frappe_list.append(this.$no_result);
	}

	setup_freeze_area() {
		this.$freeze = $('<div class="freeze"></div>').hide();
		this.$frappe_list.append(this.$freeze);
	}

	get_no_result_message() {
		return __('Nothing to show');
	}

	setup_paging_area() {
		const paging_values = [20, 100, 500];
		this.$paging_area = $(
			`<div class="list-paging-area level">
				<div class="level-left">
					<div class="btn-group">
						${paging_values.map(value => `
							<button type="button" class="btn btn-default btn-sm btn-paging"
								data-value="${value}">
								${value}
							</button>
						`).join('')}
					</div>
				</div>
				<div class="level-right">
					<button class="btn btn-default btn-more btn-sm">
						${__("More")}...
					</button>
				</div>
			</div>`
		).hide();
		this.$frappe_list.append(this.$paging_area);

		// set default paging btn active
		this.$paging_area
			.find(`.btn-paging[data-value="${this.page_length}"]`)
			.addClass('btn-info');

		this.$paging_area.on('click', '.btn-paging, .btn-more', e => {
			const $this = $(e.currentTarget);

			if ($this.is('.btn-paging')) {
				// set active button
				this.$paging_area.find('.btn-paging').removeClass('btn-info');
				$this.addClass('btn-info');

				this.start = 0;
				this.page_length = $this.data().value;
				this.refresh();
			} else if ($this.is('.btn-more')) {
				this.start = this.start + this.page_length;
				this.refresh();
			}
		});
	}

	setup_footnote_area() {
		this.$footnote_area = null;
	}

	get_fields() {
		// convert [fieldname, Doctype] => tabDoctype.fieldname
		return this.fields.map(f => frappe.model.get_full_column_name(f[0], f[1]));
	}

	setup_view() {
		// for child classes
	}

	get_filters_for_args() {
		// filters might have a fifth param called hidden,
		// we don't want to pass that server side
		return this.filter_area.get().map(filter => filter.slice(0, 4));
	}

	get_args() {
		return {
			doctype: this.doctype,
			fields: this.get_fields(),
			filters: this.get_filters_for_args(),
			order_by: this.sort_selector.get_sql_string(),
			start: this.start,
			page_length: this.page_length
		};
	}

	refresh() {
		this.freeze(true);
		// fetch data from server
		const args = this.get_args();
		return frappe.call({
			method: this.method,
			type: 'GET',
			args: args
		}).then(r => {
			// render
			this.freeze(false);
			this.prepare_data(r);
			this.toggle_result_area();
			this.before_render();
			this.render();
		});
	}

	prepare_data(r) {
		let data = r.message || {};
		data = frappe.utils.dict(data.keys, data.values);

		if (this.start === 0) {
			this.data = data;
		} else {
			this.data = this.data.concat(data);
		}

		this.data = this.data.uniqBy(d => d.name);
	}

	freeze() {
		// show a freeze message while data is loading
	}

	before_render() {

	}

	render() {
		// for child classes
	}

	toggle_result_area() {
		this.$result.toggle(this.data.length > 0);
		this.$paging_area.toggle(this.data.length > 0);
		this.$no_result.toggle(this.data.length == 0);

		const show_more = (this.start + this.page_length) <= this.data.length;
		this.$paging_area.find('.btn-more')
			.toggle(show_more);
	}

	call_for_selected_items(method, args = {}) {
		args.names = this.get_checked_items(true);

		frappe.call({
			method: method,
			args: args,
			freeze: true,
			callback: r => {
				if (!r.exc) {
					this.refresh();
				}
			}
		});
	}
};

class FilterArea {
	constructor(list_view) {
		this.list_view = list_view;
		this.standard_filters_wrapper = this.list_view.page.page_form;
		this.$filter_list_wrapper = $('<div class="filter-list">').appendTo(this.list_view.$frappe_list);
		this.trigger_refresh = true;
		this.setup();
	}

	setup() {
		this.make_standard_filters();
		this.make_filter_list();
	}

	get() {
		let filters = this.filter_list.get_filters();
		let standard_filters = this.get_standard_filters();

		return filters
			.concat(standard_filters)
			.uniqBy(JSON.stringify);
	}

	set(filters) {
		// use to method to set filters without triggering refresh
		this.trigger_refresh = false;
		return this.add(filters, false)
			.then(() => {
				this.trigger_refresh = true;
			});
	}

	add(filters, refresh = true) {
		if (!filters || Array.isArray(filters) && filters.length === 0)
			return Promise.resolve();

		if (typeof filters[0] === 'string') {
			// passed in the format of doctype, field, condition, value
			const filter = Array.from(arguments);
			filters = [filter];
		}

		filters = filters.filter(f => {
			return !this.exists(f);
		});

		const { non_standard_filters, promise } = this.set_standard_filter(filters);

		return promise
			.then(() => {
				return non_standard_filters.length > 0 &&
					this.filter_list.add_filters(non_standard_filters);
			})
			.then(() => {
				refresh && this.list_view.refresh();
			});
	}

	refresh_list_view() {
		if (this.trigger_refresh) {
			this.list_view.refresh();
		}
	}

	exists(f) {
		let exists = false;
		// check in standard filters
		const fields_dict = this.list_view.page.fields_dict;
		if (f[2] === '=' && f[1] in fields_dict) {
			const value = fields_dict[f[1]].get_value();
			if (value) {
				exists = true;
			}
		}

		// check in filter area
		if (!exists) {
			exists = this.filter_list.filter_exists(f);
		}

		return exists;
	}

	set_standard_filter(filters) {
		if (filters.length === 0) {
			return {
				non_standard_filters: [],
				promise: Promise.resolve()
			};
		}

		const fields_dict = this.list_view.page.fields_dict;

		let out = filters.reduce((out, filter) => {
			// eslint-disable-next-line
			const [dt, fieldname, condition, value] = filter;
			out.promise = out.promise || Promise.resolve();
			out.non_standard_filters = out.non_standard_filters || [];

			if (fields_dict[fieldname] && condition === '=') {
				// standard filter
				out.promise = out.promise.then(
					() => fields_dict[fieldname].set_value(value)
				);
			} else {
				// filter out non standard filters
				out.non_standard_filters.push(filter);
			}
			return out;
		}, {});

		return out;
	}

	remove(fieldname) {
		const fields_dict = this.list_view.page.fields_dict;

		if (fieldname in fields_dict) {
			fields_dict[fieldname].set_value('');
			return;
		}
		this.filter_list.get_filter(fieldname).remove();
	}

	clear() {
		this.filter_list.clear_filters();

		const fields_dict = this.list_view.page.fields_dict;
		for (let key in fields_dict) {
			const field = this.list_view.page.fields_dict[key];
			field.set_value('');
		}
	}

	make_standard_filters() {
		$(
			`<div class="flex justify-center align-center">
				<span class="octicon octicon-search text-muted small"></span>
			</div>`
		)
			.css({
				height: '30px',
				width: '20px',
				marginRight: '-2px',
				marginLeft: '10px'
			})
			.prependTo(this.standard_filters_wrapper);

		let fields = [
			{
				fieldtype: 'Data',
				label: 'ID',
				condition: 'like',
				fieldname: 'name',
				onchange: () => this.refresh_list_view()
			}
		];

		const doctype_fields = this.list_view.meta.fields;

		fields = fields.concat(doctype_fields.filter(
			df => df.in_standard_filter &&
				frappe.model.is_value_type(df.fieldtype)
		).map(df => {
			let options = df.options;
			let condition = '=';
			let fieldtype = df.fieldtype;
			if (['Text', 'Small Text', 'Text Editor', 'Data'].includes(fieldtype)) {
				fieldtype = 'Data';
				condition = 'like';
			}
			if (df.fieldtype == "Select" && df.options) {
				options = df.options.split("\n");
				if (options.length > 0 && options[0] != "") {
					options.unshift("");
					options = options.join("\n");
				}
			}
			return {
				fieldtype: fieldtype,
				label: __(df.label),
				options: options,
				fieldname: df.fieldname,
				condition: condition,
				onchange: () => this.refresh_list_view()
			};
		}));

		if (fields.length > 3) {
			fields = fields.map((df, i) => {
				if (i >= 3) {
					df.input_class = 'hidden-sm hidden-xs';
				}
				return df;
			});
		}

		fields.map(df => this.list_view.page.add_field(df));
	}

	get_standard_filters() {
		const filters = [];
		const fields_dict = this.list_view.page.fields_dict;
		for (let key in fields_dict) {
			let field = fields_dict[key];
			let value = field.get_value();
			if (value) {
				if (field.df.condition === 'like' && !value.includes('%')) {
					value = '%' + value + '%';
				}
				filters.push([
					this.list_view.doctype,
					field.df.fieldname,
					field.df.condition || '=',
					value
				]);
			}
		}

		return filters;
	}

	make_filter_list() {
		this.filter_list = new frappe.ui.FilterGroup({
			base_list: this.list_view,
			parent: this.$filter_list_wrapper,
			doctype: this.list_view.doctype,
			default_filters: [],
			on_change: () => this.refresh_list_view()
		});
	}
}

// utility function to validate view modes
frappe.views.view_modes = ['List', 'Gantt', 'Kanban', 'Calendar', 'Image', 'Inbox', 'Report'];
frappe.views.is_valid = view_mode => frappe.views.view_modes.includes(view_mode);

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/list/list_view.js
 */
frappe.provide('frappe.views');

frappe.views.ListView = class ListView extends frappe.views.BaseList {
	static load_last_view() {
		const route = frappe.get_route();
		const doctype = route[1];

		if (route.length === 2) {
			// List/{doctype} => List/{doctype}/{last_view} or List
			const user_settings = frappe.get_user_settings(doctype);
			frappe.set_route('List', doctype, user_settings.last_view || 'List');
			return true;
		}
		return false;
	}

	get view_name() {
		// ListView -> List
		return this.constructor.name.split('View')[0];
	}

	show() {
		this.init().then(() => {
			if (frappe.route_options) {
				this.set_filters_from_route_options();
				return;
			} else {
				this.refresh();
			}
		});
	}

	get view_user_settings() {
		return this.user_settings[this.view_name] || {};
	}

	setup_defaults() {
		super.setup_defaults();
		// initialize with saved filters
		const saved_filters = this.view_user_settings.filters;
		if (saved_filters) {
			this.filters = saved_filters;
		} else {
			// filters in listview_settings
			const filters = (this.settings.filters || []).map(f => {
				if (f.length === 3) {
					f = [this.doctype, f[0], f[1], f[2]];
				}
				return f;
			});

			this.filters = filters;
		}
		// initialize with saved order by
		this.order_by = this.view_user_settings.order_by || 'modified desc';
		// buld menu items)
		this.menu_items = this.menu_items.concat(this.get_menu_items());

		this.patch_refresh_and_load_lib();
	}

	patch_refresh_and_load_lib() {
		// throttle refresh for 1s
		this.refresh = this.refresh.bind(this);
		this.refresh = frappe.utils.throttle(this.refresh, 1000);
		this.load_lib = new Promise(resolve => {
			if (this.required_libs) {
				frappe.require(this.required_libs, resolve);
			} else {
				resolve();
			}
		});
		// call refresh every 5 minutes
		const interval = 5 * 60 * 1000;
		setInterval(this.refresh, interval);
	}

	setup_page_head() {
		super.setup_page_head();
		this.set_primary_action();
	}

	set_primary_action() {
		if (this.can_create) {
			this.page.set_primary_action(__('New'), () => {
				this.make_new_doc();
			}, 'octicon octicon-plus');
		} else {
			this.page.clear_primary_action();
		}
	}

	make_new_doc() {
		const doctype = this.doctype;
		const options = {};
		this.filter_area.get().forEach(f => {
			if (f[2] === "=" && frappe.model.is_non_std_field(f[1])) {
				options[f[1]] = f[3];
			}
		});
		frappe.new_doc(doctype, options);
	}

	setup_view() {
		this.setup_columns();
		this.setup_events();
		this.settings.onload && this.settings.onload(this);
	}

	setup_footnote_area() {
		const match_rules_list = frappe.perm.get_match_rules(this.doctype);

		if (match_rules_list.length) {
			this.$footnote_area =
				frappe.utils.set_footnote(this.$footnote_area, this.$frappe_list,
					frappe.render_template('list_permission_footer', {
						condition_list: match_rules_list
					}));
		}
	}

	setup_columns() {
		// setup columns for list view
		this.columns = [];

		const get_df = frappe.meta.get_docfield.bind(null, this.doctype);

		// 1st column: title_field or name
		if (this.meta.title_field) {
			this.columns.push({
				type: 'Subject',
				df: get_df(this.meta.title_field)
			});
		} else {
			this.columns.push({
				type: 'Subject',
				df: {
					label: __('Name'),
					fieldname: 'name'
				}
			});
		}

		// 2nd column: Status indicator
		if (frappe.has_indicator(this.doctype)) {
			// indicator
			this.columns.push({
				type: 'Status'
			});
		}

		const fields_in_list_view = this.get_fields_in_list_view();
		// Add rest from in_list_view docfields
		this.columns = this.columns.concat(
			fields_in_list_view
				.filter(df => {
					if (frappe.has_indicator(this.doctype) && df.fieldname === 'status') {
						return false;
					}
					if (!df.in_list_view) {
						return false;
					}
					return df.fieldname !== this.meta.title_field;
				})
				.map(df => ({
					type: 'Field',
					df
				}))
		);

		// limit to 4 columns
		this.columns = this.columns.slice(0, 4);
	}

	get_no_result_message() {
		const new_button = this.can_create ?
			`<p><button class="btn btn-primary btn-sm btn-new-doc">
				${__('Make a new {0}', [__(this.doctype)])}
			</button></p>` : '';

		return `<div class="msg-box no-border">
			<p>${__('No {0} found', [__(this.doctype)])}</p>
			${new_button}
		</div>`;
	}

	get_args() {
		const args = super.get_args();

		return Object.assign(args, {
			with_comment_count: true
		});
	}

	// freeze(toggle) {
	// 	if (this.view_name !== 'List') return;

	// 	this.$freeze.toggle(toggle);
	// 	this.$result.toggle(!toggle);

	// 	const columns = this.columns;
	// 	if (toggle) {
	// 		if (this.$freeze.find('.freeze-row').length > 0) return;

	// 		const html = `
	// 			${this.get_header_html()}
	// 			${Array.from(new Array(10)).map(loading_row).join('')}
	// 		`;
	// 		this.$freeze.html(html);
	// 	}

	// 	function loading_row() {
	// 		return `
	// 			<div class="list-row freeze-row level">
	// 				<div class="level-left">
	// 					<div class="list-row-col list-subject"></div>
	// 					${columns.slice(1).map(c => `<div class="list-row-col"></div>`).join('')}
	// 				</div>
	// 				<div class="level-right"></div>
	// 			</div>
	// 		`;
	// 	}
	// }

	toggle_result_area() {
		super.toggle_result_area();
		this.toggle_delete_button(
			this.$result.find('.list-row-check:checked').length > 0
		);
	}

	before_render() {
		this.settings.before_render && this.settings.before_render();
		frappe.model.user_settings.save(this.doctype, 'last_view', this.view_name);
		this.save_view_user_settings({
			filters: this.filter_area.get(),
			order_by: this.sort_selector.get_sql_string()
		});
	}

	render() {
		if (this.data.length > 0) {
			const html = `
				${this.get_header_html()}
				${this.data.map(doc => this.get_list_row_html(doc)).join('')}
			`;
			this.$result.html(html);
		}
		this.render_count();
		this.render_tags();
	}

	render_count() {
		this.get_count_html()
			.then(html => {
				this.$result.find('.list-count').html(html);
			});
	}

	render_tags() {
		const $list_rows = this.$result.find('.list-row-container');

		this.data.forEach((d, i) => {
			let tag_html = $(`<div class='tag-row'>
				<div class='list-tag hidden-xs'></div>
			</div>`).appendTo($list_rows.get(i));

			// add tags
			let tag_editor = new frappe.ui.TagEditor({
				parent: tag_html.find('.list-tag'),
				frm: {
					doctype: this.doctype,
					docname: d.name
				},
				list_sidebar: this.list_sidebar,
				user_tags: d._user_tags,
				on_change: function (user_tags) {
					d._user_tags = user_tags;
				}
			});

			tag_editor.wrapper.on('click', '.tagit-label', (e) => {
				const $this = $(e.currentTarget);
				this.filter_area.add(this.doctype, '_user_tags', '=', $this.text());
			});
		});
	}

	get_header_html() {
		const subject_field = this.columns[0].df;
		let subject_html = `
			<input class="level-item list-check-all hidden-xs" type="checkbox" title="${__("Select All")}">
			<span class="level-item list-liked-by-me">
				<i class="octicon octicon-heart text-extra-muted" title="${__("Likes")}"></i>
			</span>
			<span class="level-item">${__(subject_field.label)}</span>
		`;
		const $columns = this.columns.map(col => {
			let classes = [
				'list-row-col ellipsis',
				col.type == 'Subject' ? 'list-subject level' : 'hidden-xs',
				frappe.model.is_numeric_field(col.df) ? 'text-right' : ''
			].join(' ');

			return `
				<div class="${classes}">
					${col.type === 'Subject' ? subject_html : `
					<span>${__(col.df && col.df.label || col.type)}</span>`}
				</div>
			`;
		}).join('');

		return this.get_header_html_skeleton($columns, '<span class="list-count"></span>');
	}

	get_header_html_skeleton(left = '', right = '') {
		return `
			<header class="level list-row list-row-head text-muted small">
				<div class="level-left list-header-subject">
					${left}
				</div>
				<div class="level-left checkbox-actions">
					<div class="level list-subject">
						<input class="level-item list-check-all hidden-xs" type="checkbox" title="${__("Select All")}">
						<span class="level-item list-header-meta"></span>
					</div>
				</div>
				<div class="level-right">
					${right}
				</div>
			</header>
		`;
	}

	get_left_html(doc) {
		return this.columns.map(col => this.get_column_html(col, doc)).join('');
	}

	get_right_html(doc) {
		return this.get_meta_html(doc);
	}

	get_list_row_html(doc) {
		return this.get_list_row_html_skeleton(this.get_left_html(doc), this.get_right_html(doc));
	}

	get_list_row_html_skeleton(left = '', right = '') {
		return `
			<div class="list-row-container">
				<div class="level list-row small">
					<div class="level-left ellipsis">
						${left}
					</div>
					<div class="level-right text-muted ellipsis">
						${right}
					</div>
				</div>
			</div>
		`;
	}

	get_column_html(col, doc) {
		if (col.type === 'Status') {
			return `
				<div class="list-row-col hidden-xs ellipsis">
					${this.get_indicator_html(doc)}
				</div>
			`;
		}

		const df = col.df || {};
		const label = df.label;
		const fieldname = df.fieldname;
		const value = doc[fieldname] || '';

		// listview_setting formatter
		const formatters = this.settings.formatters;

		const format = () => {
			if (formatters && formatters[fieldname]) {
				return formatters[fieldname](value, df, doc);
			} else if (df.fieldtype === 'Code') {
				return value;
			} else {
				return frappe.format(value, df, null, doc);
			}
		};

		const field_html = () => {
			let html;
			const _value = typeof value === 'string' ? frappe.utils.escape_html(value) : value;

			if (df.fieldtype === 'Image') {
				html = df.options ?
					`<img src="${doc[df.options]}" style="max-height: 30px; max-width: 100%;">` :
					`<div class="missing-image small">
						<span class="octicon octicon-circle-slash"></span>
					</div>`;
			} else if (df.fieldtype === 'Select') {
				html = `<span class="filterable indicator ${frappe.utils.guess_colour(_value)} ellipsis"
					data-filter="${fieldname},=,${value}">
					${__(_value)}
				</span>`;
			} else if (df.fieldtype === 'Link') {
				html = `<a class="filterable text-muted ellipsis"
					data-filter="${fieldname},=,${value}">
					${_value}
				</a>`;
			} else if (df.fieldtype === 'Text Editor') {
				html = `<span class="text-muted ellipsis">
					${_value}
				</span>`;
			} else {
				html = `<a class="filterable text-muted ellipsis"
					data-filter="${fieldname},=,${value}">
					${format()}
				</a>`;
			}

			return `<span class="ellipsis"
				title="${__(label) + ': ' + _value}">
				${html}
			</span>`;
		};

		const class_map = {
			Subject: 'list-subject level',
			Field: 'hidden-xs'
		};
		const css_class = [
			'list-row-col ellipsis',
			class_map[col.type],
			frappe.model.is_numeric_field(df) ? 'text-right' : ''
		].join(' ');

		const html_map = {
			Subject: this.get_subject_html(doc),
			Field: field_html()
		};
		const column_html = html_map[col.type];

		return `
			<div class="${css_class}">
				${column_html}
			</div>
		`;
	}

	get_meta_html(doc) {
		let html = '';
		if (doc[this.meta.title_field || ''] !== doc.name) {
			html += `
				<div class="level-item hidden-xs hidden-sm ellipsis">
					<a class="text-muted ellipsis" href="${this.get_form_link(doc)}">
						${doc.name}
					</a>
				</div>
			`;
		}
		const modified = comment_when(doc.modified, true);

		const last_assignee = JSON.parse(doc._assign || '[]').slice(-1)[0];
		const assigned_to = last_assignee ?
			`<span class="filterable"
				data-filter="_assign,like,%${last_assignee}%">
				${frappe.avatar(last_assignee)}
			</span>` :
			`<span class="avatar avatar-small avatar-empty"></span>`;

		const comment_count =
			`<span class="${!doc._comment_count ? 'text-extra-muted' : ''} comment-count">
				<i class="octicon octicon-comment-discussion"></i>
				${doc._comment_count > 99 ? "99+" : doc._comment_count}
			</span>`;

		html += `
			<div class="level-item hidden-xs list-row-activity">
				${modified}
				${assigned_to}
				${comment_count}
			</div>
			<div class="level-item visible-xs text-right">
				${this.get_indicator_dot(doc)}
			</div>
		`;

		return html;
	}

	get_count_html() {
		const current_count = this.data.length;

		return frappe.call({
			type: 'GET',
			method: this.method,
			args: {
				doctype: this.doctype,
				filters: this.get_filters_for_args(),
				fields: [`count(${frappe.model.get_full_column_name('name', this.doctype)}) as total_count`]
			}
		}).then(r => {
			const count = r.message.values[0][0] || current_count;
			const str = __('{0} of {1}', [current_count, count]);
			const html = `<span>${str}</span>`;
			return html;
		});
	}

	get_form_link(doc) {
		const docname = doc.name.match(/[%'"]/)
			? encodeURIComponent(doc.name)
			: doc.name;

		return '#Form/' + this.doctype + '/' + docname;
	}

	get_subject_html(doc) {
		let user = frappe.session.user;
		let subject_field = this.columns[0].df;
		let value = doc[subject_field.fieldname] || doc.name;
		let subject = strip_html(value);
		let escaped_subject = frappe.utils.escape_html(value);

		const liked_by = JSON.parse(doc._liked_by || '[]');
		let heart_class = liked_by.includes(user) ?
			'liked-by' : 'text-extra-muted not-liked';

		const seen = JSON.parse(doc._seen || '[]')
			.includes(user) ? 'seen' : '';

		let subject_html = `
			<input class="level-item list-row-checkbox hidden-xs" type="checkbox" data-name="${doc.name}">
			<span class="level-item" style="margin-bottom: 1px;">
				<i class="octicon octicon-heart like-action ${heart_class}"
					data-name="${doc.name}" data-doctype="${this.doctype}"
					data-liked-by="${encodeURI(doc._liked_by) || '[]'}"
				>
				</i>
				<span class="likes-count">
					${ liked_by.length > 99 ? __("99") + '+' : __(liked_by.length || '')}
				</span>
			</span>
			<span class="level-item ${seen} ellipsis" title="${escaped_subject}">
				<a class="ellipsis" href="${this.get_form_link(doc)}" title="${escaped_subject}">
				${subject}
				</a>
			</span>
		`;

		return subject_html;
	}

	get_indicator_html(doc) {
		const indicator = frappe.get_indicator(doc, this.doctype);
		if (indicator) {
			return `<span class="indicator ${indicator[1]} filterable"
				data-filter='${indicator[2]}'>
				${__(indicator[0])}
			<span>`;
		}
		return '';
	}

	get_indicator_dot(doc) {
		const indicator = frappe.get_indicator(doc, this.doctype);
		if (!indicator) return '';
		return `<span class='indicator ${indicator[1]}' title='${__(indicator[0])}'></span>`;
	}

	setup_events() {
		// filterable events
		this.$result.on('click', '.filterable', e => {
			if (e.metaKey || e.ctrlKey) return;
			e.stopPropagation();
			const $this = $(e.currentTarget);
			const filters = $this.attr('data-filter').split('|');

			const filters_to_apply = filters.map(f => {
				f = f.split(',');
				if (f[2] === 'Today') {
					f[2] = frappe.datetime.get_today();
				} else if (f[2] == 'User') {
					f[2] = frappe.session.user;
				}
				return [this.doctype, f[0], f[1], f.slice(2).join(',')];
			});
			this.filter_area.add(filters_to_apply);
		});

		this.$result.on('click', '.list-row', (e) => {
			const $target = $(e.target);

			// tick checkbox if Ctrl/Meta key is pressed
			if (e.ctrlKey || e.metaKey && !$target.is('a')) {
				const $list_row = $(e.currentTarget);
				const $check = $list_row.find('.list-row-checkbox');
				$check.prop('checked', !$check.prop('checked'));
				e.preventDefault();
				this.on_row_checked();
				return;
			}

			// don't open form when checkbox, like, filterable are clicked
			if ($target.hasClass('filterable') ||
				$target.hasClass('octicon-heart') ||
				$target.is(':checkbox') ||
				$target.is('a')
			) {
				return;
			}

			// open form
			const $row = $(e.currentTarget);
			const link = $row.find('.list-subject a').get(0);
			if (link) {
				window.location.href = link.href;
				return false;
			}
		});

		// toggle tags
		this.list_sidebar.parent.on('click', '.list-tag-preview', () => {
			this.toggle_tags();
		});

		this.$no_result.find('.btn-new-doc').click(() => this.make_new_doc());

		this.setup_check_events();
		this.setup_like();
	}

	setup_check_events() {
		this.$result.on('change', 'input[type=checkbox]', e => {
			const $target = $(e.currentTarget);

			if ($target.is('.list-header-subject .list-check-all')) {
				const $check = this.$result.find('.checkbox-actions .list-check-all');
				$check.prop('checked', $target.prop('checked'));
				$check.trigger('change');
			} else if ($target.is('.checkbox-actions .list-check-all')) {
				const $check = this.$result.find('.list-header-subject .list-check-all');
				$check.prop('checked', $target.prop('checked'));

				this.$result.find('.list-row-checkbox')
					.prop('checked', $target.prop('checked'));
			}

			this.on_row_checked();
		});

		this.$result.on('click', '.list-row-checkbox', e => {
			const $target = $(e.currentTarget);

			// shift select checkboxes
			if (e.shiftKey && this.$checkbox_cursor && !$target.is(this.$checkbox_cursor)) {
				const name_1 = this.$checkbox_cursor.data().name;
				const name_2 = $target.data().name;
				const index_1 = this.data.findIndex(d => d.name === name_1);
				const index_2 = this.data.findIndex(d => d.name === name_2);
				let [min_index, max_index] = [index_1, index_2];

				if (min_index > max_index) {
					[min_index, max_index] = [max_index, min_index];
				}

				let docnames = this.data.slice(min_index + 1, max_index).map(d => d.name);
				const selector = docnames.map(name => `.list-row-checkbox[data-name="${name}"]`).join(',');
				this.$result.find(selector).prop('checked', true);
			}

			this.$checkbox_cursor = $target;
		});
	}

	setup_like() {
		this.$result.on('click', '.like-action', frappe.ui.click_toggle_like);
		this.$result.on('click', '.list-liked-by-me', e => {
			const $this = $(e.currentTarget);
			$this.toggleClass('active');

			if ($this.hasClass('active')) {
				this.filter_area.add(this.doctype, '_liked_by', 'like', '%' + frappe.session.user + '%');
			} else {
				this.filter_area.remove('_liked_by');
			}
		});

		frappe.ui.setup_like_popover(this.$result, '.liked-by');
	}

	on_row_checked() {
		this.$list_head_subject = this.$list_head_subject || this.$result.find('header .list-header-subject');
		this.$checkbox_actions = this.$checkbox_actions || this.$result.find('header .checkbox-actions');

		this.$checks = this.$result.find('.list-row-checkbox:checked');

		this.$list_head_subject.toggle(this.$checks.length === 0);
		this.$checkbox_actions.toggle(this.$checks.length > 0);

		if (this.$checks.length === 0) {
			this.$list_head_subject.find('.list-select-all').prop('checked', false);
		} else {
			this.$checkbox_actions.find('.list-header-meta').html(
				__('{0} items selected', [this.$checks.length])
			);
			this.$checkbox_actions.show();
			this.$list_head_subject.hide();
		}

		if (this.can_delete) {
			this.toggle_delete_button(this.$checks.length > 0);
		}
	}

	toggle_delete_button(toggle) {
		if (toggle) {
			this.page.set_primary_action(__('Delete'),
				() => this.delete_items(),
				'octicon octicon-trashcan'
			).addClass('btn-danger');
		} else {
			this.page.btn_primary.removeClass('btn-danger');
			this.set_primary_action();
		}
	}

	toggle_tags() {
		this.$result.toggleClass('tags-shown');
	}

	delete_items() {
		const docnames = this.get_checked_items(true);

		frappe.confirm(__('Delete {0} items permanently?', [docnames.length]),
			() => {
				frappe.call({
					method: 'frappe.desk.reportview.delete_items',
					freeze: true,
					args: {
						items: docnames,
						doctype: this.doctype
					}
				}).then((r) => {
					let failed = r.message;
					if (!failed) failed = [];

					if (failed.length && !r._server_messages) {
						frappe.throw(__('Cannot delete {0}', [failed.map(f => f.bold()).join(', ')]));
					}
					if (failed.length < docnames.length) {
						frappe.utils.play_sound('delete');
						this.refresh(true);
					}
				});
			}
		);
	}

	get_checked_items(only_docnames) {
		const docnames = Array.from(this.$checks || [])
			.map(check => $(check).data().name);

		if (only_docnames) return docnames;

		return this.data.filter(d => docnames.includes(d.name));
	}

	save_view_user_settings(obj) {
		return frappe.model.user_settings.save(this.doctype, this.view_name, obj);
	}

	on_update(data) {
		if (data.doctype === this.doctype) {
			this.refresh();
		}
	}

	get_menu_items() {
		const doctype = this.doctype;
		const items = [];

		if (frappe.model.can_import(doctype)) {
			items.push({
				label: __('Import'),
				action: () => frappe.set_route('List', 'Data Import', {
					reference_doctype: doctype
				}),
				standard: true
			});
		}
		if (frappe.model.can_set_user_permissions(doctype)) {
			items.push({
				label: __('User Permissions'),
				action: () => frappe.set_route('List', 'User Permission', {
					allow: doctype
				}),
				standard: true
			});
		}
		if (frappe.user_roles.includes('System Manager')) {
			items.push({
				label: __('Role Permissions Manager'),
				action: () => frappe.set_route('permission-manager', {
					doctype
				}),
				standard: true
			});

			items.push({
				label: __('Customize'),
				action: () => frappe.set_route('Form', 'Customize Form', {
					doc_type: doctype
				}),
				standard: true
			});
		}

		items.push({
			label: __('Toggle Sidebar'),
			action: () => this.toggle_side_bar(),
			standard: true
		});

		// utility
		const bulk_assignment = () => {
			return {
				label: __('Assign To'),
				action: () => {
					const docnames = this.get_checked_items(true);
					if (docnames.length > 0) {
						const dialog = new frappe.ui.form.AssignToDialog({
							obj: this,
							method: 'frappe.desk.form.assign_to.add_multiple',
							doctype: this.doctype,
							docname: docnames,
							bulk_assign: true,
							re_assign: true,
							callback: () => this.refresh(true)
						});
						dialog.clear();
						dialog.show();
					} else {
						frappe.msgprint(__('Select records for assignment'));
					}
				},
				standard: true
			};
		};

		const bulk_printing = () => {
			const print_settings = frappe.model.get_doc(':Print Settings', 'Print Settings');
			const allow_print_for_draft = cint(print_settings.allow_print_for_draft);
			const is_submittable = frappe.model.is_submittable(this.doctype);
			const allow_print_for_cancelled = cint(print_settings.allow_print_for_cancelled);

			return {
				label: __('Print'),
				action: () => {
					const items = this.get_checked_items();

					const valid_docs = items.filter(doc => {
						return !is_submittable || doc.docstatus === 1 ||
							(allow_print_for_cancelled && doc.docstatus == 2) ||
							(allow_print_for_draft && doc.docstatus == 0) ||
							frappe.user.has_role('Administrator');
					}).map(doc => doc.name);

					var invalid_docs = items.filter(doc => !valid_docs.includes(doc.name));

					if (invalid_docs.length > 0) {
						frappe.msgprint(__('You selected Draft or Cancelled documents'));
						return;
					}

					if (valid_docs.length > 0) {
						const dialog = new frappe.ui.Dialog({
							title: __('Print Documents'),
							fields: [{
								'fieldtype': 'Check',
								'label': __('With Letterhead'),
								'fieldname': 'with_letterhead'
							},
							{
								'fieldtype': 'Select',
								'label': __('Print Format'),
								'fieldname': 'print_sel',
								options: frappe.meta.get_print_formats(this.doctype)
							}]
						});

						dialog.set_primary_action(__('Print'), args => {
							if (!args) return;
							const default_print_format = frappe.get_meta(this.doctype).default_print_format;
							const with_letterhead = args.with_letterhead ? 1 : 0;
							const print_format = args.print_sel ? args.print_sel : default_print_format;
							const json_string = JSON.stringify(valid_docs);

							const w = window.open('/api/method/frappe.utils.print_format.download_multi_pdf?' +
								'doctype=' + encodeURIComponent(this.doctype) +
								'&name=' + encodeURIComponent(json_string) +
								'&format=' + encodeURIComponent(print_format) +
								'&no_letterhead=' + (with_letterhead ? '0' : '1'));
							if (!w) {
								frappe.msgprint(__('Please enable pop-ups'));
								return;
							}
						});

						dialog.show();
					} else {
						frappe.msgprint(__('Select atleast 1 record for printing'));
					}
				},
				standard: true
			};
		};

		// bulk assignment
		items.push(bulk_assignment());

		if (frappe.model.can_print(doctype)) {
			items.push(bulk_printing());
		}

		// add to desktop
		items.push({
			label: __('Add to Desktop'),
			action: () => frappe.add_to_desktop(doctype, doctype),
			standard: true
		});

		if (frappe.user.has_role('System Manager') && frappe.boot.developer_mode === 1) {
			// edit doctype
			items.push({
				label: __('Edit DocType'),
				action: () => frappe.set_route('Form', 'DocType', doctype),
				standard: true
			});
		}

		return items;
	}

	set_filters_from_route_options() {
		const filters = [];
		for (let field in frappe.route_options) {
			var value = frappe.route_options[field];
			var doctype = null;

			// if `Child DocType.fieldname`
			if (field.includes('.')) {
				doctype = field.split('.')[0];
				field = field.split('.')[1];
			}

			// find the table in which the key exists
			// for example the filter could be {"item_code": "X"}
			// where item_code is in the child table.

			// we can search all tables for mapping the doctype
			if (!doctype) {
				doctype = frappe.meta.get_doctype_for_field(this.doctype, field);
			}

			if (doctype) {
				if ($.isArray(value)) {
					filters.push([doctype, field, value[0], value[1]]);
				} else {
					filters.push([doctype, field, "=", value]);
				}
			}
		}
		frappe.route_options = null;

		this.filter_area.add(filters);
	}

	static trigger_list_update(data) {
		const doctype = data.doctype;
		if (!doctype) return;
		frappe.provide('frappe.views.trees');

		// refresh tree view
		if (frappe.views.trees[doctype]) {
			frappe.views.trees[doctype].tree.refresh();
			return;
		}

		// refresh list view
		const page_name = frappe.get_route_str();
		const list_view = frappe.views.list_view[page_name];
		list_view && list_view.on_update(data);
	}
};

$(document).on('save', function (event, doc) {
	frappe.views.ListView.trigger_list_update(doc);
});
/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/list/list_factory.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide('frappe.views.list_view');

cur_list = null;
frappe.views.ListFactory = frappe.views.Factory.extend({
	make: function (route) {
		var me = this;
		var doctype = route[1];

		frappe.model.with_doctype(doctype, function () {
			if (locals['DocType'][doctype].issingle) {
				frappe.set_re_route('Form', doctype);
			} else {
				// List / Gantt / Kanban / etc
				// File is a special view
				const view_name = doctype !== 'File' ? route[2] : 'File';
				let view_class = frappe.views[view_name + 'View'];
				if (!view_class) view_class = frappe.views.ListView;

				if (view_class && view_class.load_last_view && view_class.load_last_view()) {
					// view can have custom routing logic
					return;
				}

				frappe.provide('frappe.views.list_view.' + doctype);
				const page_name = frappe.get_route_str();

				if (!frappe.views.list_view[page_name]) {
					frappe.views.list_view[page_name] = new view_class({
						doctype: doctype,
						parent: me.make_page(true, page_name)
					});
				} else {
					frappe.container.change_to(page_name);
				}
				me.set_cur_list();
			}
		});
	},
	show: function () {
		if(this.re_route_to_view()) {
			return;
		}
		this.set_module_breadcrumb();
		this._super();
		this.set_cur_list();
		cur_list && cur_list.show();
	},
	re_route_to_view: function() {
		var route = frappe.get_route();
		var doctype = route[1];
		var last_route = frappe.route_history.slice(-2)[0];
		if (route[0] === 'List' && route.length === 2 && frappe.views.list_view[doctype]) {
			if(last_route && last_route[0]==='List' && last_route[1]===doctype) {
				// last route same as this route, so going back.
				// this happens because #List/Item will redirect to #List/Item/List
				// while coming from back button, the last 2 routes will be same, so
				// we know user is coming in the reverse direction (via back button)

				// example:
				// Step 1: #List/Item redirects to #List/Item/List
				// Step 2: User hits "back" comes back to #List/Item
				// Step 3: Now we cannot send the user back to #List/Item/List so go back one more step
				window.history.go(-1);
				return true;
			} else {
				return false;
			}
		}
	},
	set_module_breadcrumb: function () {
		if (frappe.route_history.length > 1) {
			var prev_route = frappe.route_history[frappe.route_history.length - 2];
			if (prev_route[0] === 'modules') {
				var doctype = frappe.get_route()[1],
					module = prev_route[1];
				if (frappe.module_links[module] && frappe.module_links[module].includes(doctype)) {
					// save the last page from the breadcrumb was accessed
					frappe.breadcrumbs.set_doctype_module(doctype, module);
				}
			}
		}
	},
	set_cur_list: function () {
		var route = frappe.get_route();
		var page_name = frappe.get_route_str();
		cur_list = frappe.views.list_view[page_name];
		if (cur_list && cur_list.doctype !== route[1]) {
			// changing...
			cur_list = null;
		}
	}
});

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/list/list_sidebar.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide('frappe.views');

// opts:
// stats = list of fields
// doctype
// parent
// set_filter = function called on click

frappe.views.ListSidebar = Class.extend({
	init: function(opts) {
		$.extend(this, opts);
		this.make();
		this.get_stats();
		this.cat_tags = [];
	},
	make: function() {
		var sidebar_content = frappe.render_template("list_sidebar", {doctype: this.doctype});

		this.sidebar = $('<div class="list-sidebar overlay-sidebar hidden-xs hidden-sm"></div>')
			.html(sidebar_content)
			.appendTo(this.page.sidebar.empty());

		this.setup_reports();
		this.setup_assigned_to_me();
		this.setup_views();
		this.setup_kanban_boards();
		this.setup_calendar_view();
		this.setup_email_inbox();

		let limits = frappe.boot.limits;

		if(limits.upgrade_url && limits.expiry && !frappe.flags.upgrade_dismissed) {
			this.setup_upgrade_box();
		}
	},
	setup_views: function() {
		var show_list_link = false;

		if(frappe.views.calendar[this.doctype]) {
			this.sidebar.find('.list-link[data-view="Calendar"]').removeClass("hide");
			this.sidebar.find('.list-link[data-view="Gantt"]').removeClass('hide');
			show_list_link = true;
		}
		//show link for kanban view
		this.sidebar.find('.list-link[data-view="Kanban"]').removeClass('hide');
		if(this.doctype === "Communication" && frappe.boot.email_accounts.length) {
			this.sidebar.find('.list-link[data-view="Inbox"]').removeClass('hide');
			show_list_link = true;
		}

		if(frappe.treeview_settings[this.doctype]) {
			this.sidebar.find(".tree-link").removeClass("hide");
		}

		this.current_view = 'List';
		var route = frappe.get_route();
		if(route.length > 2 && frappe.views.view_modes.includes(route[2])) {
			this.current_view = route[2];

			if(this.current_view === 'Kanban') {
				this.kanban_board = route[3];
			} else if (this.current_view === 'Inbox') {
				this.email_account = route[3];
			}
		}

		// disable link for current view
		this.sidebar.find('.list-link[data-view="'+ this.current_view +'"] a')
			.attr('disabled', 'disabled').addClass('disabled');

		//enable link for Kanban view
		this.sidebar.find('.list-link[data-view="Kanban"] a, .list-link[data-view="Inbox"] a')
			.attr('disabled', null).removeClass('disabled');

		// show image link if image_view
		if(this.list_view.meta.image_field) {
			this.sidebar.find('.list-link[data-view="Image"]').removeClass('hide');
			show_list_link = true;
		}

		if(show_list_link) {
			this.sidebar.find('.list-link[data-view="List"]').removeClass('hide');
		}
	},
	setup_reports: function() {
		// add reports linked to this doctype to the dropdown
		var me = this;
		var added = [];
		var dropdown = this.page.sidebar.find('.reports-dropdown');
		var divider = false;

		var add_reports = function(reports) {
			$.each(reports, function(name, r) {
				if(!r.ref_doctype || r.ref_doctype==me.doctype) {
					var report_type = r.report_type==='Report Builder'
						? `List/${r.ref_doctype}/Report` : 'query-report';

					var route = r.route || report_type + '/' + (r.title || r.name);

					if(added.indexOf(route)===-1) {
						// don't repeat
						added.push(route);

						if(!divider) {
							me.get_divider().appendTo(dropdown);
							divider = true;
						}

						$('<li><a href="#'+ route + '">'
							+ __(r.title || r.name)+'</a></li>').appendTo(dropdown);
					}
				}
			});
		};

		// from reference doctype
		if(this.list_view.settings.reports) {
			add_reports(this.list_view.settings.reports);
		}

		// from specially tagged reports
		add_reports(frappe.boot.user.all_reports || []);
	},
	setup_kanban_boards: function() {
		// add kanban boards linked to this doctype to the dropdown
		var me = this;
		var $dropdown = this.page.sidebar.find('.kanban-dropdown');
		var divider = false;

		var meta = frappe.get_meta(this.doctype);
		var boards = meta && meta.__kanban_boards;
		if (!boards) return;

		boards.forEach(function(board) {
			var route = ["List", board.reference_doctype, "Kanban", board.name].join('/');
			if(!divider) {
				me.get_divider().appendTo($dropdown);
				divider = true;
			}
			$(`<li><a href="#${route}">
				<span>${__(board.name)}</span>
				${board.private ? '<i class="fa fa-lock fa-fw text-warning"></i>' : ''}
			</a></li>`).appendTo($dropdown);
		});

		$dropdown.find('.new-kanban-board').click(function() {
			// frappe.new_doc('Kanban Board', {reference_doctype: me.doctype});
			var select_fields = frappe.get_meta(me.doctype)
				.fields.filter(function(df) {
					return df.fieldtype === 'Select' &&
						df.fieldname !== 'kanban_column';
				});

			var fields = [
				{
					fieldtype: 'Data',
					fieldname: 'board_name',
					label: __('Kanban Board Name'),
					reqd: 1
				}
			];

			if(select_fields.length > 0) {
				fields = fields.concat([{
					fieldtype: 'Select',
					fieldname: 'field_name',
					label: __('Columns based on'),
					options: select_fields.map(df => df.label).join('\n'),
					default: select_fields[0]
				},
				{
					fieldtype: 'Check',
					fieldname: 'custom_column',
					label: __('Custom Column'),
					default: 0,
					onchange: function() {
						var checked = d.get_value('custom_column');
						if(checked) {
							$(d.body).find('.frappe-control[data-fieldname="field_name"]').hide();
						} else {
							$(d.body).find('.frappe-control[data-fieldname="field_name"]').show();
						}
					}
				}]);
			}

			if(me.doctype === 'Task') {
				fields[0].description = __('A new Project with this name will be created');
			}

			if(['Note', 'ToDo'].includes(me.doctype)) {
				fields[0].description = __('This Kanban Board will be private');
			}

			var d = new frappe.ui.Dialog({
				title: __('New Kanban Board'),
				fields: fields,
				primary_action_label: __('Save'),
				primary_action: function(values) {

					var custom_column = values.custom_column !== undefined ?
						values.custom_column : 1;
					var field_name;
					if(custom_column) {
						field_name = 'kanban_column';
					} else {
						field_name =
							select_fields
								.find(df => df.label === values.field_name)
								.fieldname;
					}

					me.add_custom_column_field(custom_column)
						.then(function() {
							return me.make_kanban_board(values.board_name, field_name);
						})
						.then(function() {
							d.hide();
						}, function(err) {
							frappe.msgprint(err);
						});
				}
			});
			d.show();
		});
	},
	add_custom_column_field: function(flag) {
		var me = this;
		return new Promise(function(resolve, reject) {
			if(!flag) resolve(false);
			frappe.call({
				method: 'frappe.custom.doctype.custom_field.custom_field.add_custom_field',
				args: {
					doctype: me.doctype,
					df: {
						label: 'Kanban Column',
						fieldname: 'kanban_column',
						fieldtype: 'Select',
						hidden: 1
					}
				}
			}).success(function() {
				resolve(true);
			}).error(function(err) {
				reject(err);
			});
		});
	},
	make_kanban_board: function(board_name, field_name) {
		var me = this;
		return frappe.call({
			method: 'frappe.desk.doctype.kanban_board.kanban_board.quick_kanban_board',
			args: {
				doctype: me.doctype,
				board_name: board_name,
				field_name: field_name
			},
			callback: function(r) {
				var kb = r.message;
				if(kb.filters) {
					frappe.provide('frappe.kanban_filters');
					frappe.kanban_filters[kb.kanban_board_name] = kb.filters;
				}
				frappe.set_route(
					'List',
					me.doctype,
					'Kanban',
					kb.kanban_board_name
				);
			}
		});
	},
	setup_calendar_view: function() {
		const doctype = this.doctype;

		frappe.db.get_list('Calendar View', {
			filters: {
				reference_doctype: doctype
			}
		}).then(result => {
			if (!result) return;
			const calendar_views = result;
			const $link_calendar = this.sidebar.find('.list-link[data-view="Calendar"]');

			let default_link = '';
			if (frappe.views.calendar[this.doctype]) {
				// has standard calendar view
				default_link = `<li><a href="#List/${doctype}/Calendar/Default">
					${ __("Default") }</a></li>`;
			}
			const other_links = calendar_views.map(
				calendar_view => `<li><a href="#List/${doctype}/Calendar/${calendar_view.name}">
					${ __(calendar_view.name) }</a>
				</li>`
			).join('');

			const dropdown_html = `
				<div class="btn-group">
					<a class="dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
						${ __("Calendar") } <span class="caret"></span>
					</a>
					<ul class="dropdown-menu calendar-dropdown" style="max-height: 300px; overflow-y: auto;">
						${default_link}
						${other_links}
					</ul>
				</div>
			`;
			$link_calendar.removeClass('hide');
			$link_calendar.html(dropdown_html);
		});
	},
	setup_email_inbox: function() {
		// get active email account for the user and add in dropdown
		if(this.doctype != "Communication")
			return;

		let $dropdown = this.page.sidebar.find('.email-account-dropdown');
		let divider = false;

		if(has_common(frappe.user_roles, ["System Manager", "Administrator"])) {
			$(`<li class="new-email-account"><a>${__("New Email Account")}</a></li>`)
				.appendTo($dropdown);
		}

		let accounts = frappe.boot.email_accounts;
		accounts.forEach((account) => {
			let email_account = (account.email_id == "All Accounts")? "All Accounts": account.email_account;
			let route = ["List", "Communication", "Inbox", email_account].join('/');
			if(!divider) {
				this.get_divider().appendTo($dropdown);
				divider = true;
			}
			$(`<li><a href="#${route}">${account.email_id}</a></li>`).appendTo($dropdown);
			if(account.email_id === "Sent Mail")
				divider = false;
		});

		$dropdown.find('.new-email-account').click(function() {
			frappe.new_doc("Email Account");
		});
	},
	setup_assigned_to_me: function() {
		var me = this;
		this.page.sidebar.find(".assigned-to-me a").on("click", function() {
			me.list_view.assigned_to_me();
		});
	},
	setup_upgrade_box: function() {
		let upgrade_list = $(`<ul class="list-unstyled sidebar-menu"></ul>`).appendTo(this.sidebar);

		// Show Renew/Upgrade button,
		// if account is holding one user free plan or
		// if account's expiry date within range of 30 days from today's date

		let upgrade_date = frappe.datetime.add_days(frappe.datetime.get_today(), 30);
		if (frappe.boot.limits.users === 1 || upgrade_date >= frappe.boot.limits.expiry) {
			let upgrade_box = $(`<div class="border" style="
					padding: 0px 10px;
					border-radius: 3px;
				">
				<a><i class="octicon octicon-x pull-right close" style="margin-top: 10px;"></i></a>
				<h5>Go Premium</h5>
				<p>Upgrade to a premium plan with more users, storage and priority support.</p>
				<button class="btn btn-xs btn-default" style="margin-bottom: 10px;"> Renew / Upgrade </button>
				</div>`).appendTo(upgrade_list);

			upgrade_box.find('.btn-primary').on('click', () => {
				frappe.set_route('usage-info');
			});

			upgrade_box.find('.close').on('click', () => {
				upgrade_list.remove();
				frappe.flags.upgrade_dismissed = 1;
			});
		}
	},
	get_cat_tags:function(){
		return this.cat_tags;
	},
	get_stats: function() {
		var me = this;
		frappe.call({
			method: 'frappe.desk.reportview.get_sidebar_stats',
			args: {
				stats: me.stats,
				doctype: me.doctype,
				filters: me.default_filters || []
			},
			callback: function(r) {
				me.defined_category = r.message;
				if (r.message.defined_cat ){
					me.defined_category = r.message.defined_cat;
					me.cats = {};
					//structure the tag categories
					for (var i in me.defined_category){
						if (me.cats[me.defined_category[i].category]===undefined){
							me.cats[me.defined_category[i].category]=[me.defined_category[i].tag];
						}else{
							me.cats[me.defined_category[i].category].push(me.defined_category[i].tag);
						}
						me.cat_tags[i]=me.defined_category[i].tag;
					}
					me.tempstats =r.message.stats;

					$.each(me.cats, function (i, v) {
						me.render_stat(i, (me.tempstats || {})["_user_tags"],v);
					});
					me.render_stat("_user_tags", (me.tempstats || {})["_user_tags"]);
				}
				else
				{
					//render normal stats
					me.render_stat("_user_tags", (r.message.stats|| {})["_user_tags"]);
				}
			}
		});
	},
	render_stat: function(field, stat, tags) {
		var me = this;
		var sum = 0;
		var stats = [];
		var label = frappe.meta.docfield_map[this.doctype][field] ?
			frappe.meta.docfield_map[this.doctype][field].label : field;

		stat = (stat || []).sort(function(a, b) { return b[1] - a[1]; });
		$.each(stat, function(i,v) { sum = sum + v[1]; });

		if(tags) {
			for (var t in tags) {
				var nfound = -1;
				for (var i in stat) {
					if (tags[t] ===stat[i][0]) {
						stats.push(stat[i]);
						nfound = i;
						break;
					}
				}
				if (nfound<0) {
					stats.push([tags[t],0]);
				} else {
					me.tempstats["_user_tags"].splice(nfound,1);
				}
			}
			field = "_user_tags";
		} else {
			stats = stat;
		}
		var context = {
			field: field,
			stat: stats,
			sum: sum,
			label: field==='_user_tags' ?  (tags ? __(label) : __("Tags")) : __(label),
		};
		$(frappe.render_template("list_sidebar_stat", context))
			.on("click", ".stat-link", function() {
				var fieldname = $(this).attr('data-field');
				var label = $(this).attr('data-label');
				if (label == "No Tags") {
					me.list_view.filter_list.add_filter(me.list_view.doctype, fieldname, 'not like', '%,%');
					me.list_view.run();
				} else {
					me.set_filter(fieldname, label);
				}
			})
			.insertBefore(this.sidebar.find(".close-sidebar-button"));
	},
	set_fieldtype: function(df) {

		// scrub
		if(df.fieldname=="docstatus") {
			df.fieldtype="Select",
			df.options=[
				{value:0, label:"Draft"},
				{value:1, label:"Submitted"},
				{value:2, label:"Cancelled"},
			];
		} else if(df.fieldtype=='Check') {
			df.fieldtype='Select';
			df.options=[{value:0,label:'No'},
				{value:1,label:'Yes'}];
		} else if(['Text','Small Text','Text Editor','Code','Tag','Comments',
			'Dynamic Link','Read Only','Assign'].indexOf(df.fieldtype)!=-1) {
			df.fieldtype = 'Data';
		} else if(df.fieldtype=='Link' && this.$w.find('.condition').val()!="=") {
			df.fieldtype = 'Data';
		}
		if(df.fieldtype==="Data" && (df.options || "").toLowerCase()==="email") {
			df.options = null;
		}
	},
	reload_stats: function() {
		this.sidebar.find(".sidebar-stat").remove();
		this.get_stats();
	},
	get_divider: function() {
		return $('<li role="separator" class="divider"></li>');
	}
});

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/list/list_sidebar.html
 */
frappe.templates['list_sidebar'] = '<ul class="list-unstyled sidebar-menu user-actions hide">  <li class="divider"></li> </ul> <ul class="list-unstyled sidebar-menu standard-actions">   {% if frappe.model.can_get_report(doctype) %}   <li class="divider"></li>   <li>    <div class="btn-group">     <a class="dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">        {{ __("Reports") }} <span class="caret"></span>      </a>     <ul class="dropdown-menu reports-dropdown" style="max-height: 300px; overflow-y: auto;">      <li><a href="#List/{{ doctype }}/Report">{{ __("Report Builder") }}</a></li>     </ul>    </div>   </li>  {% endif %}  <li class="divider"></li>  <li class="list-link" data-view="List">   <a href="#List/{%= doctype %}/List">{%= __("List") %}</a></li>  <li class="hide list-link" data-view="Image">   <a href="#List/{%= doctype %}/Image">{%= __("Images") %}</a></li>  <li class="hide list-link" data-view="Gantt">   <a href="#List/{%= doctype %}/Gantt">{%= __("Gantt") %}</a></li>  <li class="hide tree-link">   <a href="#Tree/{%= doctype %}">{%= __("Tree") %}</a></li>  <li class="hide list-link" data-view="Calendar">   <a href="#List/{%= doctype %}/Calendar">{%= __("Calendar") %}</a></li>  <li class="hide list-link" data-view="Kanban">   <div class="btn-group">    <a class="dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">     {{ __("Kanban") }} <span class="caret"></span>    </a>    <ul class="dropdown-menu kanban-dropdown" style="max-height: 300px; overflow-y: auto;">     <li class="new-kanban-board"><a>{{ __("New Kanban Board") }}</a></li>    </ul>   </div>  </li>  <li class="hide list-link" data-view="Inbox">   <div class="btn-group">    <a class="dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">     {{ __("Email Inbox") }} <span class="caret"></span>    </a>    <ul class="dropdown-menu email-account-dropdown" style="max-height: 300px; overflow-y: auto;">    </ul>   </div>  </li>  <li class="assigned-to-me">   <a>{%= __("Assigned To Me") %}</a>  </li>  {% if(frappe.help.has_help(doctype)) { %}  <li><a class="help-link" data-doctype="{{ doctype }}">{{ __("Help") }}</a></li>  {% } %} </ul> <ul class="list-unstyled close-sidebar-button visible-xs visible-sm">  <li class="divider"></li>  <li class="close-sidebar">Close</li> </ul> ';

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/list/list_sidebar_stat.html
 */
frappe.templates['list_sidebar_stat'] = '<ul class="list-unstyled sidebar-menu sidebar-stat">  <li class="divider"></li>  <li class="h6 stat-label">{{ label }}</li>  {% if(!stat.length) { %}  <li class="stat-no-records text-muted">{{ __("No records tagged.") }}</li>  {% } else {   for (var i=0, l=stat.length; i < l; i++) {    var stat_label = stat[i][0];    var stat_count = stat[i][1];  %}    <li>     <a class="stat-link badge-hover" data-label="{{ stat_label %}" data-field="{{ field %}">      <span class="badge">{{ stat_count }}</span>      <span>{{ __(stat_label) }}</span>     </a>    </li>   {% }  } %} </ul> <div style="margin-top: -10px;">  <a class="list-tag-preview hidden-xs text-muted">{{ __("Show tags") }}</a> </div> ';

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/list/list_item_main.html
 */
frappe.templates['list_item_main'] = '<div class="list-item__content ellipsis     {% if(col.type==="Subject") { %}         list-item__content--flex-2     {% } else { %}         hidden-xs     {% } %}     {% if(col.df && ["Int", "Float", "Currency", "Percent"].indexOf(col.df.fieldtype)!==-1) { %}text-right{% } %}"     {% if(col.type!=="Indicator" && col.title) { %}         title="{%= col.title + ": " + value %}"     {% } %} >     {% if (col.type==="Subject") { %}         {%= subject %}     {% } else if (col.type==="Indicator") { %}         {%= indicator %}     {% } else if (col.render) { %}         {%= col.render(data) %}     {% } else if (col.fieldtype==="Image") { %}         {% if(data[col.df.options]) { %}         <img src="{%= data[col.df.options] %}" style="max-height: 30px; max-width: 100%;">         {% } else { %}         <div class="missing-image small"><span class="octicon octicon-circle-slash"></span></div>         {% } %}     {% } else if(col.fieldtype==="Select") { %}         <span class="filterable indicator {%= frappe.utils.guess_colour(value) %} ellipsis"             data-filter="{%= col.fieldname %},=,{%= value %}">{%= __(value) %}</span>     {% } else if(col.fieldtype==="Link") { %}         <a class="filterable text-muted grey ellipsis"             data-filter="{%= col.fieldname %},=,{%= value %}">{%= value %}</a>     {% } else { %}         <a class="filterable text-muted ellipsis"             data-filter="{%= col.fieldname %},=,{%= value %}">         {% if(formatters && formatters[col.fieldname]) { %}             {{ formatters[col.fieldname](value, col.df, data) }}         {% } else if(col.fieldtype == "Code") { %}             {{ value }}         {% } else { %}             {{ frappe.format(value, col.df, null, data) }}         {% } %}         </a>     {% } %} </div>';

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/list/list_item_row.html
 */
frappe.templates['list_item_row'] = '<div class="list-item">     {%= main %}           {% if (meta.title_field && !settings.hide_name_column) {         var is_different = data.name !== data[meta.title_field];     %}     <div class="list-item__content list-item__content--id hidden-xs hidden-sm ellipsis">         {% if (is_different) { %}         <a class="text-muted ellipsis" href="#Form/{%= data._doctype_encoded %}/{%= data._name_encoded %}">             {%= data.name %}</a>         {% } %}     </div>     {% } %}           {% if (!data._hide_activity) { %}     <div class="list-item__content list-item__content--activity hidden-xs">                  {%= frappe.render_template("item_assigned_to_comment_count", { data: data }) %}     </div>     <div class="list-item__content list-item__content--indicator visible-xs text-right">         {%= indicator_dot %}     </div>     {% } %} </div> ';

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/list/list_item_main_head.html
 */
frappe.templates['list_item_main_head'] = '<div class="list-item__content ellipsis text-muted  {% if(col.type==="Subject") { %}   list-item__content--flex-2  {% } else { %}   hidden-xs  {% } %}  {% if(col.df && ["Int", "Float", "Currency", "Percent"].indexOf(col.df.fieldtype)!==-1) { %}text-right{% } %}" >   {% if (col.type==="Subject") { %}   {%= frappe.render_template("header_select_all_like_filter", { _checkbox: _checkbox }) %}  {% } %}  <span class="list-col-title ellipsis">{{ __(col.title) || __(col.label) || "" }}</span>  </div>';

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/list/list_item_row_head.html
 */
frappe.templates['list_item_row_head'] = '<div class="list-item list-item--head" data-list-renderer="{{list.name}}">          {%= main %}           {% if(list.meta.title_field && !list.settings.hide_name_column) { %}     <div class="list-item__content hidden-xs hidden-sm"></div>     {% } %}          <div class="list-item__content list-item__content--activity hidden-xs text-right list-row-right"></div> </div> ';

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/list/list_item_subject.html
 */
frappe.templates['list_item_subject'] = '{% if (_checkbox) { %} <input class="list-row-checkbox hidden-xs" type="checkbox" data-name="{{name}}"> {% } %} {% if (!_hide_activity) { %} <span class="liked-by" data-liked-by=\'{{ JSON.stringify(_liked_by) }}\'>  <i class="octicon octicon-heart      {% if (_liked_by.indexOf(_user)===-1) { %}          text-extra-muted not-liked      {% }%}      fa-fw like-action"      data-name="{{ _name }}" data-doctype="{{ doctype }}">  </i>  <span class="likes-count">{{ (_liked_by.length > 99 ? "99+" : _liked_by.length) || "" }}</span> </span> {% } %} <a class="grey list-id {{ css_seen }} ellipsis"  data-name="{{ _name }}"  href="#Form/{{ _doctype_encoded }}/{{ _name_encoded }}"     title="{{ _full_title }}">{{ strip_html(_title) }}</a> {% if (_workflow && !_without_workflow) { %} <span class="label label-{{ _workflow.style }} filterable"     data-filter="{{ _workflow.fieldname }},=,{{ _workflow.value }}">  {%= _workflow.value %}</span> {% } %} ';

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/list/list_permission_footer.html
 */
frappe.templates['list_permission_footer'] = '<div class="level">     <i class="octicon octicon-lock level-item" style="margin-right: 5px;"></i>     {% for(var i=0; i < condition_list.length; i++) {         var conditions = condition_list[i]; %}         <div class="level-item">             {% if (i > 0) { %}<span style="margin-right: 10px;">{{ __("Or") }}</span>{% } %}             {% for(key in conditions) { %}                 <span class="label label-default" style="margin-right: 10px;">                     {% if(conditions[key].length) { %}                         {{ key }} = {{ frappe.utils.comma_or(conditions[key]) }}                     {% } else { %}                         {{ __("{0} is not set", [key]) }}                     {% } %}                 </span>             {% } %}         </div>     {% } %} </div>  ';

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/views/gantt/gantt_view.js
 */
frappe.provide('frappe.views');

frappe.views.GanttView = class GanttView extends frappe.views.ListView {

	setup_defaults() {
		super.setup_defaults();
		this.page_title = this.page_title + ' ' + __('Gantt');
		this.calendar_settings = frappe.views.calendar[this.doctype] || {};
		this.order_by = this.view_user_settings.order_by || this.calendar_settings.field_map.start + ' asc';
	}

	setup_view() {
		this.$result
			.css('overflow', 'auto')
			.append('<svg class="gantt-container" width="20" height="20"></svg>');
	}

	prepare_data(data) {
		super.prepare_data(data);
		this.prepare_tasks();
	}

	prepare_tasks() {
		var me = this;
		var meta = this.meta;
		var field_map = this.calendar_settings.field_map;

		this.tasks = this.data.map(function (item) {
			// set progress
			var progress = 0;
			if (field_map.progress && $.isFunction(field_map.progress)) {
				progress = field_map.progress(item);
			} else if (field_map.progress) {
				progress = item[field_map.progress];
			}

			// title
			var label;
			if (meta.title_field) {
				label = $.format("{0} ({1})", [item[meta.title_field], item.name]);
			} else {
				label = item[field_map.title];
			}

			var r = {
				start: item[field_map.start],
				end: item[field_map.end],
				name: label,
				id: item[field_map.id || 'name'],
				doctype: me.doctype,
				progress: progress,
				dependencies: item.depends_on_tasks || ""
			};

			if (item.color && frappe.ui.color.validate_hex(item.color)) {
				r['custom_class'] = 'color-' + item.color.substr(1);
			}

			if (item.is_milestone) {
				r['custom_class'] = 'bar-milestone';
			}

			return r;
		});
	}

	render() {
		this.load_lib.then(() => {
			this.render_gantt();
		});
	}

	render_gantt() {
		const me = this;
		const gantt_view_mode = this.view_user_settings.gantt_view_mode || 'Day';
		const field_map = this.calendar_settings.field_map;
		const date_format = 'YYYY-MM-DD';

		this.gantt = new Gantt(".gantt-container", this.tasks, {
			view_mode: gantt_view_mode,
			date_format: "YYYY-MM-DD",
			on_click: function (task) {
				frappe.set_route('Form', task.doctype, task.id);
			},
			on_date_change: function (task, start, end) {
				if (!me.can_write) return;
				frappe.db.set_value(task.doctype, task.id, {
					[field_map.start]: start.format(date_format),
					[field_map.end]: end.format(date_format)
				});
			},
			on_progress_change: function (task, progress) {
				if (!me.can_write) return;
				var progress_fieldname = 'progress';

				if ($.isFunction(field_map.progress)) {
					progress_fieldname = null;
				} else if (field_map.progress) {
					progress_fieldname = field_map.progress;
				}

				if (progress_fieldname) {
					frappe.db.set_value(task.doctype, task.id, {
						[progress_fieldname]: parseInt(progress)
					});
				}
			},
			on_view_change: function (mode) {
				// save view mode
				me.save_view_user_settings({
					gantt_view_mode: mode
				});
			},
			custom_popup_html: function (task) {
				var item = me.get_item(task.id);

				var html =
					`<h5>${task.name}</h5>
					<p>${task._start.format('MMM D')} - ${task._end.format('MMM D')}</p>`;

				// custom html in doctype settings
				var custom = me.settings.gantt_custom_popup_html;
				if (custom && $.isFunction(custom)) {
					var ganttobj = task;
					html = custom(ganttobj, item);
				}
				return '<div class="details-container">' + html + '</div>';
			}
		});
		this.setup_view_mode_buttons();
		this.set_colors();
	}

	setup_view_mode_buttons() {
		// view modes (for translation) __("Day"), __("Week"), __("Month"),
		//__("Half Day"), __("Quarter Day")

		let $btn_group = this.$paging_area.find('.gantt-view-mode');
		if ($btn_group.length > 0) return;

		const view_modes = this.gantt.config.view_modes || [];
		const active_class = view_mode => this.gantt.view_is(view_mode) ? 'btn-info' : '';
		const html =
			`<div class="btn-group gantt-view-mode">
				${view_modes.map(value => `<button type="button"
						class="btn btn-default btn-sm btn-view-mode ${active_class(value)}"
						data-value="${value}">
						${__(value)}
					</button>`).join('')}
			</div>`;

		this.$paging_area.find('.level-left').append(html);

		// change view mode asynchronously
		const change_view_mode = (value) => setTimeout(() => this.gantt.change_view_mode(value), 0);

		this.$paging_area.on('click', '.btn-view-mode', e => {
			const $btn = $(e.currentTarget);
			this.$paging_area.find('.btn-view-mode').removeClass('btn-info');
			$btn.addClass('btn-info');

			const value = $btn.data().value;
			change_view_mode(value);
		});
	}

	set_colors() {
		const classes = this.tasks
			.map(t => t.custom_class)
			.filter(c => c && c.startsWith('color-'));

		let style = classes.map(c => {
			const class_name = c.replace('#', '');
			const bar_color = '#' + c.substr(6);
			const progress_color = frappe.ui.color.get_contrast_color(bar_color);
			return `
				.gantt .bar-wrapper.${class_name} .bar {
					fill: ${bar_color};
				}
				.gantt .bar-wrapper.${class_name} .bar-progress {
					fill: ${progress_color};
				}
			`;
		}).join("");

		style = `<style>${style}</style>`;
		this.$result.prepend(style);
	}

	get_item(name) {
		return this.data.find(function (item) {
			return item.name === name;
		});
	}

	get required_libs() {
		return [
			"assets/frappe/js/lib/snap.svg-min.js",
			"assets/frappe/js/lib/frappe-gantt/frappe-gantt.js"
		];
	}
};

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/views/calendar/calendar.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.views.calendar");
frappe.provide("frappe.views.calendars");

frappe.views.CalendarView = class CalendarView extends frappe.views.ListView {
	static load_last_view() {
		const route = frappe.get_route();
		if (route.length === 3) {
			const doctype = route[1];
			const user_settings = frappe.get_user_settings(doctype)['Calendar'] || {};
			route.push(user_settings.last_calendar_view || 'Default');
			frappe.set_route(route);
			return true;
		} else {
			return false;
		}
	}

	setup_defaults() {
		super.setup_defaults();
		this.page_title = this.page_title + ' ' + __('Calendar');
		this.calendar_settings = frappe.views.calendar[this.doctype] || {};
		this.calendar_name = frappe.get_route()[3];
	}

	before_render() {
		super.before_render();
		this.save_view_user_settings({
			last_calendar: this.calendar_name
		});
	}

	render() {
		if (this.calendar) {
			this.calendar.refresh();
			return;
		}

		this.load_lib
			.then(() => this.get_calendar_options())
			.then(options => {
				this.calendar = new frappe.views.Calendar(options);
			});
	}

	get_calendar_options() {
		const options = {
			doctype: this.doctype,
			parent: this.$result,
			page: this.page,
			list_view: this
		};
		const calendar_name = this.calendar_name;

		return new Promise(resolve => {
			if (calendar_name === 'Default') {
				Object.assign(options, frappe.views.calendar[this.doctype]);
				resolve(options);
			} else {
				frappe.model.with_doc('Calendar View', calendar_name, () => {
					const doc = frappe.get_doc('Calendar View', calendar_name);
					Object.assign(options, {
						field_map: {
							id: "name",
							start: doc.start_date_field,
							end: doc.end_date_field,
							title: doc.subject_field
						}
					});
					resolve(options);
				});
			}
		});
	}

	get required_libs() {
		return [
			'assets/frappe/js/lib/fullcalendar/fullcalendar.min.css',
			'assets/frappe/js/lib/fullcalendar/fullcalendar.min.js',
			'assets/frappe/js/lib/fullcalendar/locale-all.js'
		];
	}
};

frappe.views.Calendar = Class.extend({
	init: function(options) {
		$.extend(this, options);
		this.make_page();
		this.setup_options();
		this.make();
	},
	make_page: function() {
		var me = this;

		// add links to other calendars
		me.page.clear_user_actions();
		$.each(frappe.boot.calendars, function(i, doctype) {
			if(frappe.model.can_read(doctype)) {
				me.page.add_menu_item(__(doctype), function() {
					frappe.set_route("List", doctype, "Calendar");
				});
			}
		});

		$(this.parent).on("show", function() {
			me.$cal.fullCalendar("refetchEvents");
		});
	},

	make: function() {
		this.$wrapper = this.parent;
		this.$cal = $("<div>").appendTo(this.$wrapper);
		this.footnote_area = frappe.utils.set_footnote(this.footnote_area, this.$wrapper,
			__("Select or drag across time slots to create a new event."));
		this.footnote_area.css({"border-top": "0px"});

		this.$cal.fullCalendar(this.cal_options);
		this.set_css();
	},
	set_css: function() {
		// flatify buttons
		this.$wrapper.find("button.fc-state-default")
			.removeClass("fc-state-default")
			.addClass("btn btn-default");

		this.$wrapper.find(".fc-button-group").addClass("btn-group");

		this.$wrapper.find('.fc-prev-button span')
			.attr('class', '').addClass('fa fa-chevron-left');
		this.$wrapper.find('.fc-next-button span')
			.attr('class', '').addClass('fa fa-chevron-right');

		var btn_group = this.$wrapper.find(".fc-button-group");
		btn_group.find(".fc-state-active").addClass("active");

		btn_group.find(".btn").on("click", function() {
			btn_group.find(".btn").removeClass("active");
			$(this).addClass("active");
		});
	},
	field_map: {
		"id": "name",
		"start": "start",
		"end": "end",
		"allDay": "all_day",
	},
	color_map: {
		"danger": "red",
		"success": "green",
		"warning": "orange",
		"default": "blue"
	},
	get_system_datetime: function(date) {
		date._offset = moment.user_utc_offset;
		return frappe.datetime.convert_to_system_tz(date);
	},
	setup_options: function() {
		var me = this;
		this.cal_options = {
			locale: frappe.boot.user.language || "en",
			header: {
				left: 'title',
				center: '',
				right: 'prev,next month,agendaWeek,agendaDay'
			},
			editable: true,
			selectable: true,
			selectHelper: true,
			forceEventDuration: true,
			events: function(start, end, timezone, callback) {
				return frappe.call({
					method: me.get_events_method || "frappe.desk.calendar.get_events",
					type: "GET",
					args: me.get_args(start, end),
					callback: function(r) {
						var events = r.message;
						events = me.prepare_events(events);
						callback(events);
					}
				});
			},
			eventRender: function(event, element) {
				element.attr('title', event.tooltip);
			},
			eventClick: function(event) {
				// edit event description or delete
				var doctype = event.doctype || me.doctype;
				if(frappe.model.can_read(doctype)) {
					frappe.set_route("Form", doctype, event.name);
				}
			},
			eventDrop: function(event, delta, revertFunc) {
				me.update_event(event, revertFunc);
			},
			eventResize: function(event, delta, revertFunc) {
				me.update_event(event, revertFunc);
			},
			select: function(startDate, endDate, jsEvent, view) {
				if (view.name==="month" && (endDate - startDate)===86400000) {
					// detect single day click in month view
					return;
				}

				var event = frappe.model.get_new_doc(me.doctype);

				event[me.field_map.start] = me.get_system_datetime(startDate);

				if(me.field_map.end)
					event[me.field_map.end] = me.get_system_datetime(endDate);

				if(me.field_map.allDay) {
					var all_day = (startDate._ambigTime && endDate._ambigTime) ? 1 : 0;

					event[me.field_map.allDay] = all_day;

					if (all_day)
						event[me.field_map.end] = me.get_system_datetime(moment(endDate).subtract(1, "s"));
				}

				frappe.set_route("Form", me.doctype, event.name);
			},
			dayClick: function(date, jsEvent, view) {
				if(view.name === 'month') {
					const $date_cell = $('td[data-date=' + date.format('YYYY-MM-DD') + "]");

					if($date_cell.hasClass('date-clicked')) {
						me.$cal.fullCalendar('changeView', 'agendaDay');
						me.$cal.fullCalendar('gotoDate', date);
						me.$wrapper.find('.date-clicked').removeClass('date-clicked');

						// update "active view" btn
						me.$wrapper.find('.fc-month-button').removeClass('active');
						me.$wrapper.find('.fc-agendaDay-button').addClass('active');
					}

					me.$wrapper.find('.date-clicked').removeClass('date-clicked');
					$date_cell.addClass('date-clicked');
				}
				return false;
			}
		};

		if(this.options) {
			$.extend(this.cal_options, this.options);
		}
	},
	get_args: function(start, end) {
		var args = {
			doctype: this.doctype,
			start: this.get_system_datetime(start),
			end: this.get_system_datetime(end),
			filters: this.list_view.filter_area.get(),
			field_map: this.field_map
		};
		return args;
	},
	refresh: function() {
		this.$cal.fullCalendar('refetchEvents');
	},
	prepare_events: function(events) {
		var me = this;

		return (events || []).map(d => {
			d.id = d.name;
			d.editable = frappe.model.can_write(d.doctype || me.doctype);

			// do not allow submitted/cancelled events to be moved / extended
			if(d.docstatus && d.docstatus > 0) {
				d.editable = false;
			}

			$.each(me.field_map, function(target, source) {
				d[target] = d[source];
			});

			if(!me.field_map.allDay)
				d.allDay = 1;

			// convert to user tz
			d.start = frappe.datetime.convert_to_user_tz(d.start);
			d.end = frappe.datetime.convert_to_user_tz(d.end);

			// show event on single day if start or end date is invalid
			if (!frappe.datetime.validate(d.start) && d.end) {
				d.start = frappe.datetime.add_days(d.end, -1);
			}

			if (d.start && !frappe.datetime.validate(d.end)) {
				d.end = frappe.datetime.add_days(d.start, 1);
			}

			me.fix_end_date_for_event_render(d);
			me.prepare_colors(d);
			return d;
		});
	},
	prepare_colors: function(d) {
		let color, color_name;
		if(this.get_css_class) {
			color_name = this.color_map[this.get_css_class(d)];
			color_name = frappe.ui.color.validate_hex(color_name) ?
				color_name : 'blue';
			d.backgroundColor = frappe.ui.color.get(color_name, 'extra-light');
			d.textColor = frappe.ui.color.get(color_name, 'dark');
		} else {
			color = d.color;
			if (!frappe.ui.color.validate_hex(color) || !color) {
				color = frappe.ui.color.get('blue', 'extra-light');
			}
			d.backgroundColor = color;
			d.textColor = frappe.ui.color.get_contrast_color(color);
		}
		return d;
	},
	update_event: function(event, revertFunc) {
		var me = this;
		frappe.model.remove_from_locals(me.doctype, event.name);
		return frappe.call({
			method: me.update_event_method || "frappe.desk.calendar.update_event",
			args: me.get_update_args(event),
			callback: function(r) {
				if(r.exc) {
					frappe.show_alert(__("Unable to update event"));
					revertFunc();
				}
			},
			error: function() {
				revertFunc();
			}
		});
	},
	get_update_args: function(event) {
		var me = this;
		var args = {
			name: event[this.field_map.id]
		};

		args[this.field_map.start] = me.get_system_datetime(event.start);

		if(this.field_map.allDay)
			args[this.field_map.allDay] = (event.start._ambigTime && event.end._ambigTime) ? 1 : 0;

		if(this.field_map.end) {
			if (!event.end) {
				event.end = event.start.add(1, "hour");
			}

			args[this.field_map.end] = me.get_system_datetime(event.end);

			if (args[this.field_map.allDay]) {
				args[this.field_map.end] = me.get_system_datetime(moment(event.end).subtract(1, "s"));
			}
		}

		args.doctype = event.doctype || this.doctype;

		return { args: args, field_map: this.field_map };
	},

	fix_end_date_for_event_render: function(event) {
		if (event.allDay) {
			// We use inclusive end dates. This workaround fixes the rendering of events
			event.start = event.start ? $.fullCalendar.moment(event.start).stripTime() : null;
			event.end = event.end ? $.fullCalendar.moment(event.end).add(1, "day").stripTime() : null;
		}
	}
});

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/views/image/image_view.js
 */
/**
 * frappe.views.ImageView
 */
frappe.provide("frappe.views");

frappe.views.ImageView = class ImageView extends frappe.views.ListView {

	setup_defaults() {
		super.setup_defaults();
		this.page_title = this.page_title + ' ' + __('Images');
	}

	set_fields() {
		this.fields = [
			'name',
			this.meta.title_field,
			this.meta.image_field
		];
	}

	prepare_data(data) {
		super.prepare_data(data);
		this.items = this.data.map(d => {
			// absolute url if cordova, else relative
			d._image_url = this.get_image_url(d);
			return d;
		});
	}

	render() {
		this.get_attached_images()
			.then(() => {
				this.render_image_view();

				if (!this.gallery) {
					this.setup_gallery();
				} else {
					this.gallery.prepare_pswp_items(this.items, this.images_map);
				}
			});
	}

	render_image_view() {
		var html = this.items.map(this.item_html.bind(this)).join("");

		this.$result.html(`
			${this.get_header_html()}
			<div class="image-view-container small">
				${html}
			</div>
		`);
	}

	item_html(item) {
		item._name = encodeURI(item.name);
		const encoded_name = item._name;
		const title = strip_html(item[this.meta.title_field || 'name']);
		const _class = !item._image_url ? 'no-image' : '';
		const _html = item._image_url ?
			`<img data-name="${encoded_name}" src="${ item._image_url }" alt="${ title }">` :
			`<span class="placeholder-text">
				${ frappe.get_abbr(title) }
			</span>`;

		return `
			<div class="image-view-item">
				<div class="image-view-header">
					<div class="list-row-col list-subject ellipsis level">
						${this.get_subject_html(item)}
					</div>
				</div>
				<div class="image-view-body">
					<a  data-name="${encoded_name}"
						title="${encoded_name}"
						href="${this.get_form_link(item)}"
					>
						<div class="image-field ${_class}"
							data-name="${encoded_name}"
						>
							${_html}
							<button class="btn btn-default zoom-view" data-name="${encoded_name}">
								<i class="fa fa-search-plus"></i>
							</button>
						</div>
					</a>
				</div>
			</div>
		`;
	}

	get_image_url(data) {
		var url;
		url = data.image ? data.image : data[this.meta.image_field];

		// absolute url for mobile
		if (window.cordova && !frappe.utils.is_url(url)) {
			url = frappe.base_url + url;
		}
		if (url) {
			return url;
		}
		return null;
	}

	get_attached_images() {
		return frappe.call({
			method: 'frappe.core.doctype.file.file.get_attached_images',
			args: {
				doctype: this.doctype,
				names: this.items.map(i => i.name)
			}
		}).then(r => {
			this.images_map = Object.assign(this.images_map || {}, r.message);
		});
	}

	get_header_html() {
		return this.get_header_html_skeleton(`
			<div class="list-row-col list-subject level ">
				<input class="level-item list-check-all hidden-xs" type="checkbox" title="Select All">
				<span class="level-item list-liked-by-me">
					<i class="octicon octicon-heart text-extra-muted" title="Likes"></i>
				</span>
				<span class="level-item"></span>
			</div>
		`);
	}

	setup_gallery() {
		var me = this;
		this.gallery = new frappe.views.GalleryView({
			doctype: this.doctype,
			items: this.items,
			wrapper: this.$result,
			images_map: this.images_map
		});
		this.$result.on('click', '.btn.zoom-view', function (e) {
			e.preventDefault();
			e.stopPropagation();
			var name = $(this).data().name;
			name = decodeURIComponent(name);
			me.gallery.show(name);
			return false;
		});
	}
};

frappe.views.GalleryView = Class.extend({
	init: function (opts) {
		$.extend(this, opts);
		var me = this;

		this.lib_ready = this.load_lib();
		this.lib_ready.then(function () {
			me.prepare();
		});
	},
	prepare: function () {
		// keep only one pswp dom element
		this.pswp_root = $('body > .pswp');
		if (this.pswp_root.length === 0) {
			var pswp = frappe.render_template('photoswipe_dom');
			this.pswp_root = $(pswp).appendTo('body');
		}
	},
	prepare_pswp_items: function (_items, _images_map) {
		var me = this;

		if (_items) {
			// passed when more button clicked
			this.items = this.items.concat(_items);
			this.images_map = _images_map;
		}

		return new Promise(resolve => {
			const items = this.items.map(function (i) {
				const query = 'img[data-name="' + i._name + '"]';
				let el = me.wrapper.find(query).get(0);

				let width, height;
				if (el) {
					width = el.naturalWidth;
					height = el.naturalHeight;
				}

				if (!el) {
					el = me.wrapper.find('.image-field[data-name="' + i._name + '"]').get(0);
					width = el.getBoundingClientRect().width;
					height = el.getBoundingClientRect().height;
				}

				return {
					src: i._image_url,
					msrc: i._image_url,
					name: i.name,
					w: width,
					h: height,
					el: el
				};
			});
			this.pswp_items = items;
			resolve();
		});
	},
	show: function (docname) {
		this.lib_ready
			.then(() => this.prepare_pswp_items())
			.then(() => this._show(docname));
	},
	_show: function (docname) {
		const me = this;
		const items = this.pswp_items;
		const item_index = items.findIndex(item => item.name === docname);

		var options = {
			index: item_index,
			getThumbBoundsFn: function (index) {
				const query = 'img[data-name="' + items[index]._name + '"]';
				let thumbnail = me.wrapper.find(query).get(0);

				if (!thumbnail) {
					return;
				}

				var pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
					rect = thumbnail.getBoundingClientRect();

				return {
					x: rect.left,
					y: rect.top + pageYScroll,
					w: rect.width
				};
			},
			history: false,
			shareEl: false,
			showHideOpacity: true
		};

		// init
		this.pswp = new PhotoSwipe(
			this.pswp_root.get(0),
			PhotoSwipeUI_Default,
			items,
			options
		);
		this.browse_images();
		this.pswp.init();
	},
	browse_images: function () {
		const $more_items = this.pswp_root.find('.pswp__more-items');
		const images_map = this.images_map;
		let last_hide_timeout = null;

		this.pswp.listen('afterChange', function () {
			const images = images_map[this.currItem.name];
			if (!images || images.length === 1) {
				$more_items.html('');
				return;
			}

			hide_more_items_after_2s();
			const html = images.map(img_html).join("");
			$more_items.html(html);
		});

		this.pswp.listen('beforeChange', hide_more_items);
		this.pswp.listen('initialZoomOut', hide_more_items);
		this.pswp.listen('destroy', () => {
			$(document).off('mousemove', hide_more_items_after_2s);
		});

		// Replace current image on click
		$more_items.on('click', '.pswp__more-item', (e) => {
			const img_el = e.target;
			const index = this.pswp.items.findIndex(i => i.name === this.pswp.currItem.name);

			this.pswp.goTo(index);
			this.pswp.items.splice(index, 1, {
				src: img_el.src,
				w: img_el.naturalWidth,
				h: img_el.naturalHeight,
				name: this.pswp.currItem.name
			});
			this.pswp.invalidateCurrItems();
			this.pswp.updateSize(true);
		});

		// hide more-images 2s after mousemove
		$(document).on('mousemove', hide_more_items_after_2s);

		function hide_more_items_after_2s() {
			clearTimeout(last_hide_timeout);
			show_more_items();
			last_hide_timeout = setTimeout(hide_more_items, 2000);
		}

		function show_more_items() {
			$more_items.show();
		}

		function hide_more_items() {
			$more_items.hide();
		}

		function img_html(src) {
			return `<div class="pswp__more-item">
				<img src="${src}">
			</div>`;
		}
	},
	load_lib: function () {
		return new Promise(resolve => {
			var asset_dir = 'assets/frappe/js/lib/photoswipe/';
			frappe.require([
				asset_dir + 'photoswipe.css',
				asset_dir + 'default-skin.css',
				asset_dir + 'photoswipe.js',
				asset_dir + 'photoswipe-ui-default.js'
			], resolve);
		});
	}
});
/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/views/kanban/kanban_view.js
 */
frappe.provide('frappe.views');

frappe.views.KanbanView = class KanbanView extends frappe.views.ListView {
	static load_last_view() {
		const route = frappe.get_route();
		if (route.length === 3) {
			const doctype = route[1];
			const user_settings = frappe.get_user_settings(doctype)['Kanban'] || {};
			if (!user_settings.last_kanban_board) {
				frappe.msgprint({
					title: __('Error'),
					indicator: 'red',
					message: __('Missing parameter Kanban Board Name')
				});
				frappe.set_route('List', doctype, 'List');
				return true;
			}
			route.push(user_settings.last_kanban_board);
			frappe.set_route(route);
			return true;
		}
		return false;
	}

	setup_defaults() {
		super.setup_defaults();
		this.board_name = frappe.get_route()[3];
		this.page_title = this.board_name;
	}

	show() {
		super.show();
		this.save_view_user_settings({
			last_kanban_board: this.board_name
		});
	}

	render() {
		const board_name = this.board_name;
		if(this.kanban && board_name === this.kanban.board_name) {
			this.kanban.update(this.data);
			this.kanban.$kanban_board.trigger('after-refresh');
			return;
		}

		this.kanban = new frappe.views.KanbanBoard({
			doctype: this.doctype,
			board_name: board_name,
			cards: this.data,
			wrapper: this.$result,
			cur_list: this,
			user_settings: this.view_user_settings
		});
		this.kanban.$kanban_board.trigger('after-refresh');
	}

	get required_libs() {
		return [
			'assets/frappe/js/lib/fluxify.min.js',
			'assets/frappe/js/frappe/views/kanban/kanban_board.js'
		];
	}
};

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/views/inbox/inbox_view.js
 */
/**
 * frappe.views.InboxView
 */

frappe.provide("frappe.views");

frappe.views.InboxView = class InboxView extends frappe.views.ListView {
	static load_last_view() {
		const route = frappe.get_route();
		if (!route[3] && frappe.boot.email_accounts.length) {
			let email_account;
			if (frappe.boot.email_accounts[0].email_id == "All Accounts") {
				email_account = "All Accounts";
			} else {
				email_account = frappe.boot.email_accounts[0].email_account;
			}
			frappe.set_route("List", "Communication", "Inbox", email_account);
			return true;
		} else if (!route[3] || (route[3] !== "All Accounts" && !is_valid(route[3]))) {
			frappe.msgprint(__('Invalid Email Account'));
			window.history.back();
			return true;
		}
		return false;

		function is_valid(email_account) {
			return frappe.boot.email_accounts.find(d => d.email_account === email_account);
		}
	}
	show() {
		super.show();
		// save email account in user_settings
		this.save_view_user_settings({
			last_email_account: this.current_email_account
		});
	}

	setup_defaults() {
		super.setup_defaults();
		this.email_account = frappe.get_route()[3];
		this.page_title = this.email_account;
		this.filters = this.get_inbox_filters();
	}

	get is_sent_emails() {
		const f = this.filter_area.get()
			.find(filter => filter[1] === 'sent_or_received');
		return f && f[3] === 'Sent';
	}

	render() {
		this.emails = this.data;
		this.render_inbox_view();
	}

	render_inbox_view() {
		let html = this.emails.map(this.render_email_row.bind(this)).join("");

		this.$result.html(`
			${this.get_header_html()}
			${html}
		`);
	}

	get_header_html() {
		return this.get_header_html_skeleton(`
			<div class="list-row-col list-subject level">
				<input class="level-item list-check-all hidden-xs" type="checkbox" title="Select All">
				<span class="level-item">${__('Subject')}</span>
			</div>
			<div class="list-row-col hidden-xs">
				<span>${this.is_sent_emails ? __("To") : __("From")}</span>
			</div>
		`);
	}

	render_email_row(email) {
		if (!email.css_seen && email.seen)
			email.css_seen = "seen";

		const columns_html = `
			<div class="list-row-col list-subject level">
				<input class="level-item list-row-checkbox hidden-xs" type="checkbox" data-name="${email.name}">
				<span class="level-item">
					<a class="${ email.seen ? 'seen' : ''} ellipsis" href="${this.get_form_link(email)}">
						${email.subject}
					</a>
				</span>
			</div>
			<div class="list-row-col hidden-xs">
				<span>${this.is_sent_emails ? email.recipients : email.sender }</span>
			</div>
		`;

		return this.get_list_row_html_skeleton(columns_html, this.get_meta_html(email));
	}

	get_meta_html(email) {
		const attachment = email.has_attachment ?
			`<span class="fa fa-paperclip fa-large" title="${__('Has Attachments')}"></span>` : '';

		const form_link = frappe.utils.get_form_link(email.reference_doctype, email.reference_name);
		const link = email.reference_doctype && email.reference_doctype !== this.doctype ?
			`<a class="text-muted grey" href="${form_link}"
				title="${__('Linked with {0}', [email.reference_doctype])}">
				<i class="fa fa-link fa-large"></i>
			</a>` : '';

		const modified = comment_when(email.modified, true);

		return `
			<div class="level-item hidden-xs list-row-activity">
				${link}
				${attachment}
				${modified}
			</div>
		`;
	}

	get_inbox_filters() {
		var email_account = this.email_account;
		var default_filters = [
			["Communication", "communication_type", "=", "Communication", true],
			["Communication", "communication_medium", "=", "Email", true],
		];
		var filters = [];
		if (email_account === "Sent") {
			filters = default_filters.concat([
				["Communication", "sent_or_received", "=", "Sent", true],
				["Communication", "email_status", "not in", "Spam,Trash", true],
			]);
		} else if (in_list(["Spam", "Trash"], email_account)) {
			filters = default_filters.concat([
				["Communication", "email_status", "=", email_account, true],
				["Communication", "email_account", "in", frappe.boot.all_accounts, true]
			]);
		} else {
			var op = "=";
			if (email_account == "All Accounts") {
				op = "in";
				email_account = frappe.boot.all_accounts;
			}

			filters = default_filters.concat([
				["Communication", "sent_or_received", "=", "Received", true],
				["Communication", "email_account", op, email_account, true],
				["Communication", "email_status", "not in", "Spam,Trash", true],
			]);
		}

		return filters;
	}

	get_no_result_message() {
		var email_account = this.email_account;
		var args;
		if (in_list(["Spam", "Trash"], email_account)) {
			return __("No {0} mail", [email_account]);
		} else if (!email_account && !frappe.boot.email_accounts.length) {
			// email account is not configured
			args = {
				doctype: "Email Account",
				msg: __("No Email Account"),
				label: __("New Email Account"),
			};
		} else {
			// no sent mail
			args = {
				doctype: "Communication",
				msg: __("No Emails"),
				label: __("Compose Email")
			};
		}

		const html = frappe.model.can_create(args.doctype) ?
			`<p>${args.msg}</p>
			<p>
				<button class="btn btn-primary btn-sm btn-new-doc">
					${args.label}
				</button>
			</p>
			` :
			`<p>${ __("No Email Accounts Assigned") }</p>`;

		return `
			<div class="msg-box no-border">
				${html}
			</div>
		`;
	}

	make_new_doc() {
		if (!this.email_account && !frappe.boot.email_accounts.length) {
			frappe.route_options = {
				'email_id': frappe.session.user_email
			};
			frappe.new_doc('Email Account');
		} else {
			new frappe.views.CommunicationComposer({
				doc: {}
			});
		}
	}
};
/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/views/file/file_view.js
 */
frappe.provide('frappe.views');

frappe.views.FileView = class FileView extends frappe.views.ListView {
	static load_last_view() {
		const route = frappe.get_route();
		if (route.length === 2) {
			const view_user_settings = frappe.get_user_settings('File', 'File');
			frappe.set_route('List', 'File', view_user_settings.last_folder || frappe.boot.home_folder);
			return true;
		}
		return false;
	}

	setup_view() {
		this.setup_events();
	}

	set_breadcrumbs() {
		const route = frappe.get_route();
		route.splice(-1);
		const last_folder = route[route.length - 1];
		if (last_folder === 'File') return;

		const last_folder_route = '#' + route.join('/');
		frappe.breadcrumbs.add({
			type: 'Custom',
			label: last_folder,
			route: last_folder_route
		});
	}

	setup_defaults() {
		super.setup_defaults();
		this.page_title = __('File Manager');

		const route = frappe.get_route();
		this.current_folder = route.slice(2).join('/');
		this.filters = [['File', 'folder', '=', this.current_folder, true]];
		this.order_by = this.view_user_settings.order_by || 'file_name asc';

		this.menu_items = this.menu_items.concat(this.file_menu_items());
	}

	file_menu_items() {
		const items = [
			{
				label: __('Cut'),
				action: () => {
					frappe.file_manager.cut(this.get_checked_items(), this.current_folder);
				},
				class: 'cut-menu-button hide'
			},
			{
				label: __('Paste'),
				action: () => {
					frappe.file_manager.paste(this.current_folder);
				},
				class: 'paste-menu-button hide'
			},
			{
				label: __('New Folder'),
				action: () => {
					frappe.prompt(__('Name'), (values) => {
						if((values.value.indexOf("/") > -1)) {
							frappe.throw(__("Folder name should not include '/' (slash)"));
						}
						const data =  {
							file_name: values.value,
							folder: this.current_folder
						};
						frappe.call({
							method: "frappe.core.doctype.file.file.create_new_folder",
							args: data
						});
					}, __('Enter folder name'), __('Create'));
				}
			},
			{
				label: __('Toggle Grid View'),
				action: () => {
					frappe.views.FileView.grid_view = !frappe.views.FileView.grid_view;
					this.refresh();
				}
			},
			{
				label: __('Import Zip'),
				action: () => {
					// make upload dialog
					frappe.ui.get_upload_dialog({
						args: {
							folder: this.current_folder,
							from_form: 1
						},
						callback: (attachment, r) => {
							frappe.call({
								method: 'frappe.core.doctype.file.file.unzip_file',
								args: {
									name: r.message.name,
								},
								callback: function (r) {
									if(r.exc) {
										frappe.msgprint(__('Error in uploading files' + r.exc));
									}
								}
							});
						},
					});
				}
			}
		];

		return items;
	}

	set_fields() {
		this.fields = this.meta.fields
			.filter(df => frappe.model.is_value_type(df.fieldtype) && !df.hidden)
			.map(df => df.fieldname)
			.concat(['name', 'modified', 'creation']);
	}

	prepare_data(data) {
		super.prepare_data(data);

		this.data = this.data.map(d => {
			let icon_class = '';
			if (d.is_folder) {
				icon_class = "octicon octicon-file-directory";
			} else if (frappe.utils.is_image_file(d.file_name)) {
				icon_class = "octicon octicon-file-media";
			} else {
				icon_class = 'octicon octicon-file-text';
			}

			let title = d.file_name || d.file_url;
			title = title.slice(0, 60);
			d._title = title;
			d.icon_class = icon_class;

			d.subject_html = `
				<i class="${icon_class} text-muted" style="width: 16px;"></i>
				<span>${title}</span>
				${d.is_private ? '<i class="fa fa-lock fa-fw text-warning"></i>' : ''}
			`;
			return d;
		});

		// Bring folders to the top
		const { sort_by } = this.sort_selector;
		if (sort_by === 'file_name') {
			this.data.sort((a, b) => {
				if (a.is_folder && !b.is_folder) {
					return -1;
				}
				if (!a.is_folder &&b.is_folder) {
					return 1;
				}
				return 0;
			});
		}
	}

	before_render() {
		super.before_render();
		frappe.model.user_settings.save('File', 'grid_view', frappe.views.FileView.grid_view);
		this.save_view_user_settings({
			last_folder: this.current_folder,
		});
	}

	render() {
		this.$result.removeClass('file-grid');
		if (frappe.views.FileView.grid_view) {
			this.render_grid_view();
		} else {
			super.render();
		}
	}

	render_grid_view() {
		let html = '';

		html = this.data.map(d => {
			return `
				<a href="${this.get_route_url(d)}">
					<div class="file-wrapper padding flex small">
						<div class="file-icon text-muted">
							<span class="${d.icon_class} mega-octicon"></span>
						</div>
						<div class="file-title ellipsis">${d._title}</div>
					</div>
				</a>
			`;
		}).join('');
		this.$result.addClass('file-grid');
		this.$result.html(html);
	}

	get_header_html() {
		let subject_html = `
			<div class="list-row-col list-subject level">
				<input class="level-item list-check-all hidden-xs" type="checkbox" title="${__("Select All")}">
				<span class="level-item">${__('File Name')}</span>
			</div>
			<div class="list-row-col ellipsis hidden-xs">
				<span>${__('File Size')}</span>
			</div>
			<div class="list-row-col ellipsis hidden-xs">
				<span>${__('Created On')}</span>
			</div>
		`;

		return this.get_header_html_skeleton(subject_html, '<span class="list-count"></span>');
	}

	get_route_url(file) {
		return file.is_folder ? '#List/File/' + file.name : this.get_form_link(file);
	}

	get_left_html(file) {
		const file_size = frappe.form.formatters.FileSize(file.file_size);
		const route_url = this.get_route_url(file);

		let created_on;
		const [date] = file.creation.split(' ');
		if (date === frappe.datetime.now_date()) {
			created_on = comment_when(file.creation);
		} else {
			created_on = frappe.datetime.str_to_user(date);
		}

		return `
			<div class="list-row-col ellipsis list-subject level">
				<input class="level-item list-row-checkbox hidden-xs" type="checkbox" data-name="${file.name}">
				<span class="level-item  ellipsis" title="${file.file_name}">
					<a class="ellipsis" href="${route_url}" title="${file.file_name}">
						${file.subject_html}
					</a>
				</span>
			</div>
			<div class="list-row-col ellipsis hidden-xs text-muted">
				<span>${file_size}</span>
			</div>
			<div class="list-row-col ellipsis hidden-xs text-muted">
				<span>${created_on}</span>
			</div>
		`;
	}

	get_right_html(file) {
		return `
			<div class="level-item list-row-activity">
				${comment_when(file.modified)}
			</div>
		`;
	}

	make_new_doc() {
		frappe.ui.get_upload_dialog({
			"args": {
				"folder": this.current_folder,
				"from_form": 1
			},
			callback:() => this.refresh()
		});
	}

	setup_events() {
		super.setup_events();
		this.setup_drag_drop();
	}

	setup_drag_drop() {
		this.$result.on('dragenter dragover', false)
			.on('drop', e => {
				var dataTransfer = e.originalEvent.dataTransfer;
				if (!(dataTransfer && dataTransfer.files && dataTransfer.files.length > 0)) {
					return;
				}
				e.stopPropagation();
				e.preventDefault();
				frappe.upload.make({
					files: dataTransfer.files,
					"args": {
						"folder": this.current_folder,
						"from_form": 1
					}
				});
			});
	}

	toggle_result_area() {
		super.toggle_result_area();
		this.toggle_cut_paste_buttons();
	}

	on_row_checked() {
		super.on_row_checked();
		this.toggle_cut_paste_buttons();
	}

	toggle_cut_paste_buttons() {
		// paste btn
		const $paste_btn = this.page.menu_btn_group.find('.paste-menu-button');
		const hide = !frappe.file_manager.can_paste ||
			frappe.file_manager.old_folder === this.current_folder;

		if (hide) {
			$paste_btn.addClass('hide');
		} else {
			$paste_btn.removeClass('hide');
		}

		// cut btn
		const $cut_btn = this.page.menu_btn_group.find('.cut-menu-button');
		if (this.$checks && this.$checks.length > 0) {
			$cut_btn.removeClass('hide');
		} else {
			$cut_btn.addClass('hide');
		}
	}
};

frappe.views.FileView.grid_view = frappe.get_user_settings('File').grid_view || false;
/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/list/header_select_all_like_filter.html
 */
frappe.templates['header_select_all_like_filter'] = '{% if (_checkbox) { %} <input class="list-select-all hidden-xs" type="checkbox"  title="{%= __("Select All") %}"> {% } %} <span class="liked-by-filter-button">  <i class="fa-fw octicon octicon-heart text-extra-muted not-liked like-action list-liked-by-me"   title="{%= __("Likes") %}"></i> </span>';

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/list/item_assigned_to_comment_count.html
 */
frappe.templates['item_assigned_to_comment_count'] = '<span class="list-row-modified text-muted">         {%= comment_when(data.modified, true) %} </span> {% if (data._assign_list.length) { %}     <span class="filterable"         data-filter="_assign,like,%{%= data._assign_list[data._assign_list.length - 1] %}%">         {%= frappe.avatar(data._assign_list[data._assign_list.length - 1]) %}</span> {% } else { %}     <span class="avatar avatar-small avatar-empty"></span> {% } %} <span class="list-comment-count small     {% if(!data._comment_count) { %} text-extra-muted {% } else { %} text-muted {% } %}">     <i class="octicon octicon-comment-discussion"></i>         {%= (data._comment_count > 99 ? "99+" : data._comment_count) || 0 %} </span> ';

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/views/treeview.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.treeview_settings");
frappe.provide('frappe.views.trees');
cur_tree = null;

frappe.views.TreeFactory = frappe.views.Factory.extend({
	make: function(route) {
		frappe.model.with_doctype(route[1], function() {
			var options = {
				doctype: route[1],
				meta: frappe.get_meta(route[1])
			};

			if (!frappe.treeview_settings[route[1]] && !frappe.meta.get_docfield(route[1], "is_group")) {
				frappe.msgprint(__("Tree view not available for {0}", [route[1]] ));
				return false;
			}
			$.extend(options, frappe.treeview_settings[route[1]] || {});
			frappe.views.trees[options.doctype] = new frappe.views.TreeView(options);
		});
	}
});

frappe.views.TreeView = Class.extend({
	init: function(opts) {
		var me = this;

		this.opts = {};
		this.opts.get_tree_root = true;
		$.extend(this.opts, opts);
		this.doctype = opts.doctype;
		this.args = {doctype: me.doctype};
		this.page_name = frappe.get_route_str();
		this.get_tree_nodes =  me.opts.get_tree_nodes || "frappe.desk.treeview.get_children";

		this.get_permissions();
		this.make_page();
		this.make_filters();

		if (me.opts.get_tree_root) {
			this.get_root();
		}

		this.onload();
		this.set_menu_item();
		this.set_primary_action();
	},
	get_permissions: function(){
		this.can_read = frappe.model.can_read(this.doctype);
		this.can_create = frappe.boot.user.can_create.indexOf(this.doctype) !== -1 ||
					frappe.boot.user.in_create.indexOf(this.doctype) !== -1;
		this.can_write = frappe.model.can_write(this.doctype);
		this.can_delete = frappe.model.can_delete(this.doctype);
	},
	make_page: function() {
		var me = this;
		this.parent = frappe.container.add_page(this.page_name);
		frappe.ui.make_app_page({parent:this.parent, single_column:true});

		this.page = this.parent.page;
		frappe.container.change_to(this.page_name);
		frappe.breadcrumbs.add(me.opts.breadcrumb || locals.DocType[me.doctype].module);

		this.set_title();

		this.page.main.css({
			"min-height": "300px",
			"padding-bottom": "25px"
		});

		this.page.add_inner_button(__('Expand All'), function() {
			me.tree.load_children(me.tree.root_node, true);
		});

		if(this.opts.view_template) {
			var row = $('<div class="row"><div>').appendTo(this.page.main);
			this.body = $('<div class="col-sm-6 col-xs-12"></div>').appendTo(row);
			this.node_view = $('<div class="col-sm-6 hidden-xs"></div>').appendTo(row);
		} else {
			this.body = this.page.main;
		}
	},
	set_title: function() {
		this.page.set_title(this.opts.title || __('{0} Tree', [__(this.doctype)]));
	},
	onload: function() {
		var me = this;
		this.opts.onload && this.opts.onload(me);
	},
	make_filters: function(){
		var me = this;
		frappe.treeview_settings.filters = []
		$.each(this.opts.filters || [], function(i, filter) {
			if(frappe.route_options && frappe.route_options[filter.fieldname]) {
				filter.default = frappe.route_options[filter.fieldname]
			}

			filter.change = function() {
				var val = this.get_value();
				me.args[filter.fieldname] = val;
				if (val) {
					me.root_label = val;
					me.page.set_title(val);
				} else {
					me.root_label = me.opts.root_label;
					me.set_title();
				}
				me.make_tree();
			}

			me.page.add_field(filter);

			if (filter.default) {
				$("[data-fieldname='"+filter.fieldname+"']").trigger("change");
			}
		})
	},
	get_root: function() {
		var me = this;
		frappe.call({
			method: me.get_tree_nodes,
			args: me.args,
			callback: function(r) {
				if (r.message) {
					me.root_label = r.message[0]["value"];
					me.make_tree();
				}
			}
		})
	},
	make_tree: function() {
		$(this.parent).find(".tree").remove();
		let get_nodes = (value, is_root) => {
			var args = Object.assign({}, this.args);
			args.parent = value;
			args.is_root = is_root;

			return new Promise(resolve => {
				frappe.call({
					method: this.get_tree_nodes,
					args: args,
					callback: (r) => { resolve(r.message); }
				})
			});
		}

		let get_all_nodes = (value, is_root) => {
			var args = Object.assign({}, this.args);
			args.parent = value;
			args.is_root = is_root;

			args.tree_method = this.get_tree_nodes;

			return new Promise(resolve => {
				frappe.call({
					method: 'frappe.desk.treeview.get_all_nodes',
					args: args,
					callback: (r) => {
						resolve(r.message);
					}
				})
			});
		}

		this.tree = new frappe.ui.Tree({
			parent: this.body,
			label: this.args[this.opts.root_label] || this.root_label || this.opts.root_label,
			expandable: true,

			// array of button props: {label, condition, click, btnClass}
			toolbar: this.get_toolbar(),

			get_nodes: get_nodes,
			get_all_nodes: get_all_nodes,

			get_label: this.opts.get_label,
			on_render: this.opts.onrender,
			on_click: (node) => { this.select_node(node); },
		});

		cur_tree = this.tree;
	},

	select_node: function(node) {
		var me = this;
		if(this.opts.click) {
			this.opts.click(node);
		}
		if(this.opts.view_template) {
			this.node_view.empty();
			$(frappe.render_template(me.opts.view_template,
				{data:node.data, doctype:me.doctype})).appendTo(this.node_view);
		}
	},
	get_toolbar: function() {
		var me = this;

		var toolbar = [
			{
				label:__(me.can_write? "Edit": "Details"),
				condition: function(node) {
					return !node.is_root && me.can_read;
				},
				click: function(node) {
					frappe.set_route("Form", me.doctype, node.label);
				}
			},
			{
				label:__("Add Child"),
				condition: function(node) { return me.can_create && node.expandable; },
				click: function(node) {
					me.new_node();
				},
				btnClass: "hidden-xs"
			},
			{
				label:__("Rename"),
				condition: function(node) {
					let allow_rename = true;
					if (me.doctype && frappe.get_meta(me.doctype)) {
						if(!frappe.get_meta(me.doctype).allow_rename) allow_rename = false;
					}
					return !node.is_root && me.can_write && allow_rename;
				},
				click: function(node) {
					frappe.model.rename_doc(me.doctype, node.label, function(new_name) {
						node.$tree_link.find('a').text(new_name);
						node.label = new_name;
					});
				},
				btnClass: "hidden-xs"
			},
			{
				label:__("Delete"),
				condition: function(node) { return !node.is_root && me.can_delete; },
				click: function(node) {
					frappe.model.delete_doc(me.doctype, node.label, function() {
						node.parent.remove();
					});
				},
				btnClass: "hidden-xs"
			}
		]

		if(this.opts.toolbar && this.opts.extend_toolbar) {
			return toolbar.concat(this.opts.toolbar)
		} else if (this.opts.toolbar && !this.opts.extend_toolbar) {
			return this.opts.toolbar
		} else {
			return toolbar
		}
	},
	new_node: function() {
		var me = this;
		var node = me.tree.get_selected_node();

		if(!(node && node.expandable)) {
			frappe.msgprint(__("Select a group node first."));
			return;
		}

		this.prepare_fields();

		// the dialog
		var d = new frappe.ui.Dialog({
			title: __('New {0}',[__(me.doctype)]),
			fields: me.fields
		});

		var args = $.extend({}, me.args);
		args["parent_"+me.doctype.toLowerCase().replace(/ /g,'_')] = me.args["parent"];

		d.set_value("is_group", 0);
		d.set_values(args);

		// create
		d.set_primary_action(__("Create New"), function() {
			var btn = this;
			var v = d.get_values();
			if(!v) return;

			var node = me.tree.get_selected_node();
			v.parent = node.label;
			v.doctype = me.doctype;

			if(node.is_root){
				v['is_root'] = node.is_root;
			}
			else{
				v['is_root'] = false;
			}

			$.extend(args, v)
			return frappe.call({
				method: me.opts.add_tree_node || "frappe.desk.treeview.add_node",
				args: args,
				callback: function(r) {
					if(!r.exc) {
						d.hide();
						if(node.expanded) {
							me.tree.toggle_node(node);
						}
						me.tree.load_children(node, true);
					}
				}
			});
		});
		d.show();
	},
	prepare_fields: function(){
		var me = this;

		this.fields = [
			{fieldtype:'Check', fieldname:'is_group', label:__('Group Node'),
				description: __("Further nodes can be only created under 'Group' type nodes")}
		]

		if (this.opts.fields) {
			this.fields = this.opts.fields;
		}

		this.ignore_fields = this.opts.ignore_fields || [];

		var mandatory_fields = $.map(me.opts.meta.fields, function(d) {
			return (d.reqd || d.bold && !d.read_only) ? d : null });

		var opts_field_names = this.fields.map(function(d) {
			return d.fieldname
		})

		mandatory_fields.map(function(d) {
			if($.inArray(d.fieldname, me.ignore_fields) === -1 && $.inArray(d.fieldname, opts_field_names) === -1) {
				me.fields.push(d)
			}
		})
	},
	print_tree: function() {
		if(!frappe.model.can_print(this.doctype)) {
			frappe.msgprint(__("You are not allowed to print this report"));
			return false;
		}
		var tree = $(".tree:visible").html();
		var me = this;
		frappe.ui.get_print_settings(false, function(print_settings) {
			var title =  __(me.docname || me.doctype);
			frappe.render_tree({title: title, tree: tree, print_settings:print_settings});
		});
	},
	set_primary_action: function(){
		var me = this;
		if (!this.opts.disable_add_node && this.can_create) {
			me.page.set_primary_action(__("New"), function() {
				me.new_node();
			}, "octicon octicon-plus")
		}
	},
	set_menu_item: function(){
		var me = this;

		this.menu_items = [
			{
				label: __('View List'),
				action: function() {
					frappe.set_route('List', me.doctype);
				}
			},
			{
				label: __('Print'),
				action: function() {
					me.print_tree();
				}

			},
			{
				label: __('Refresh'),
				action: function() {
					me.make_tree();
				}
			},
		];

		if (me.opts.menu_items) {
			me.menu_items.push.apply(me.menu_items, me.opts.menu_items)
		}

		$.each(me.menu_items, function(i, menu_item){
			var has_perm = true;
			if(menu_item["condition"]) {
				has_perm = eval(menu_item["condition"]);
			}

			if (has_perm) {
				me.page.add_menu_item(menu_item["label"], menu_item["action"]);
			}
		});

		// last menu item
		me.page.add_menu_item(__('Add to Desktop'), () => {
			const label = me.doctype === 'Account' ?
				__('Chart of Accounts') :
				__(me.doctype);
			frappe.add_to_desktop(label, me.doctype);
		});
	}
});









/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/views/image/image_view_item_row.html
 */
frappe.templates['image_view_item_row'] = '<div class="image-view-item has-checkbox ellipsis">  <div class="image-view-header doclist-row">   <div class="list-value">   {{ subject }}   </div>  </div>    <div class="image-view-body">   <a  data-name="{{ data.name }}"    title="{{ data.name }}"    href="#Form/{{ data.doctype }}/{{ data.name }}"   >    <div class="image-field"     data-name="{{ data.name }}"     style="     {% if (!data._image_url) { %}      background-color: {{ color }};     {% } %}     border: 0px;"    >     {% if (!data._image_url) { %}     <span class="placeholder-text">      {%= frappe.get_abbr(data._title) %}     </span>     {% } %}     {% if (data._image_url) { %}     <img data-name="{{ data.name }}" src="{{ data._image_url }}" alt="{{data.title}}">     {% } %}     <button class="btn btn-default zoom-view" data-name="{{data.name}}">      <i class="fa fa-search-plus"></i>     </button>    </div>   </a>  </div> </div> ';

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/views/image/photoswipe_dom.html
 */
frappe.templates['photoswipe_dom'] = '    <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">     <div class="pswp__bg"></div>     <div class="pswp__scroll-wrap">       <div class="pswp__container">    <div class="pswp__item"></div>    <div class="pswp__item"></div>    <div class="pswp__item"></div>   </div>    <div class="pswp__more-items">    </div>       <div class="pswp__ui pswp__ui--hidden">     <div class="pswp__top-bar">            <div class="pswp__counter"></div>      <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>      <button class="pswp__button pswp__button--share" title="Share"></button>      <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>      <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>                <div class="pswp__preloader">      <div class="pswp__preloader__icn">        <div class="pswp__preloader__cut">       <div class="pswp__preloader__donut"></div>        </div>      </div>     </div>    </div>     <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">     <div class="pswp__share-tooltip"></div>    </div>     <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">    </button>     <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">    </button>     <div class="pswp__caption">     <div class="pswp__caption__center"></div>    </div>    </div>   </div>  </div>';

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/views/kanban/kanban_board.html
 */
frappe.templates['kanban_board'] = '<div class="kanban">     <div class="kanban-column add-new-column">         <div class="kanban-column-title compose-column">             <a class="text-muted"> {{ __("Add a column") }}</a>         </div>         <form class="compose-column-form kanban-column-title">             <input class="new-column-title" name="title" type="text" autocomplete="off">         </form>     </div>     <div class="kanban-empty-state text-muted text-center" style="display: none;">         {{ __("Loading...") }}     </div> </div>';

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/views/kanban/kanban_column.html
 */
frappe.templates['kanban_column'] = '<div class="kanban-column" data-column-value="{{title}}">  <div class="kanban-column-title indicator {{indicator}}">   <span>{{ __(title) }}</span>   <div class="btn-group column-options dropdown pull-right">     <a class="dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">       <button class="btn btn-default btn-xs"><span class="caret"></span></button>     </a>     <ul class="dropdown-menu" style="max-height: 300px; overflow-y: auto;">       <li><a data-action="archive">{{ __("Archive") }}</a></li>     </ul>   </div>  </div>  <div class="kanban-cards">   </div>   <div class="kanban-card add-card">   <div class="kanban-card-title">    <i class="octicon octicon-plus"></i> {{ __("Add " + doctype) }}   </div>  </div>  <div class="kanban-card new-card-area">   <textarea name="title"></textarea>  </div> </div>';

/*
 *	/home/frappe/frappe-bench/apps/frappe/frappe/public/js/frappe/views/kanban/kanban_card.html
 */
frappe.templates['kanban_card'] = '<div class="kanban-card-wrapper" data-name="{{name}}">  <div class="kanban-card content">   <div class="kanban-card-title">    {{ title }}   </div>   <div class="kanban-card-meta">   </div>  </div> </div>';
